<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://genicsblog.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-02-24T05:28:52+00:00</updated><id>https://genicsblog.com/feed.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community.</subtitle><entry><title type="html">Privacy friendly website analytics with Umami and Next.js</title><link href="https://genicsblog.com/anishde12020/privacy-friendly-website-analytics-with-umami-and-next-js" rel="alternate" type="text/html" title="Privacy friendly website analytics with Umami and Next.js"/><published>2022-02-20T00:00:00+00:00</published><updated>2022-02-20T00:00:00+00:00</updated><id>https://genicsblog.com/anishde12020/privacy-friendly-website-analytics-with-umami-and-next-js</id><content type="html" xml:base="https://genicsblog.com/anishde12020/privacy-friendly-website-analytics-with-umami-and-next-js"><![CDATA[<p>Website analytics is truly a very important thing. We can understand our audience well and can tailor our content to our audience for higher engagement.</p> <p><a href="https://analytics.google.com/">Google Analytics</a> had always been the go-to solution as it is popular, easy to set up, and gives a lot of data.</p> <p>However, Google Analytics has got its own set of issues. One must ask for a cookie consent to use Google Analytics as Google Analytics uses cookies. The Google Analytics script is also quite big and is known to slow down websites.</p> <p>There have been recent allegations against Google Analytics for not being privacy-friendly and many European authorities have also <a href="https://techcrunch.com/2022/02/10/cnil-google-analytics-gdpr-breach/">found it breaching GDPR</a>.</p> <p>So, what is the solution?</p> <p>Over the years, many privacy-friendly analytics solutions have emerged including <a href="https://usefathom.com/">Fathom Analytics</a>, <a href="https://plausible.io/">Plausible Analytics</a>, and <a href="https://umami.is/">Umami Analytics</a>.</p> <p>The last 2 are open-source and all 3 of them are cookie-less and have a lightweight script that should not affect website load times.</p> <p>We are going to be focusing on Umami in this article.</p> <h2 id="a-little-bit-about-umami">A little bit about Umami</h2> <p>Umami is an open-source self-hosted analytics service. This means the source code can be accessed by anyone and one must host it themselves.</p> <p>Now, you might say that this costs money and it is not free but today we are going to look at how we can host it for free. Also, Umami uses NextJS API routes for the backend and hence it can run on any serverless architecture.</p> <p>We are going to be looking at setting it up on <a href="https://railway.app/">Railway</a> today, however, it can also be hosted on <a href="https://vercel.com/dashboard">Vercel</a> or <a href="https://www.netlify.com/">Netlify</a>. We are also going to look at adding analytics to a Next.js application.</p> <p>You can see a <a href="https://app.umami.is/share/8rmHaheU/umami.is">live demo of the platform here</a></p> <p>Fun fact: <a href="https://hashnode.com/">Hashnode</a> also uses Umami and is rolling out an Umami dashboard as advanced analytics üòé</p> <p>You can see the <a href="https://stats.hashnode.com/share/VDldVSkU/9f4dd26c-c7e6-4fa1-88aa-87d90a0dba43">public analytics for my blog here</a></p> <h2 id="hosting-umami-for-free-on-railway">Hosting Umami for free on Railway</h2> <p><a href="https://railway.app/">Railway</a> is an awesome hosting platform that lets you host applications quickly and easily. The free plan allows usage of up to $5/month which should be good enough for a few small to medium-sized websites.</p> <p>In fact, I have been using it for the past 3-4 months and it has been an amazing experience. My usage costs are usually lower than $2/month and hence I have never paid anything. You don‚Äôt even need to link your credit card!</p> <p>My usage this month (3 websites) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645083158123/UEZNXrJL_.png" alt="image.png"/></p> <p>You can also link a credit card to get $10 of usage per month for free (you will be charged for anything above that).</p> <p>You can sign up <a href="https://railway.app?referralCode=AnishDe12020">here</a></p> <h3 id="setting-up-the-project-on-railway">Setting up the project on Railway</h3> <p>We are going to follow the <a href="https://umami.is/docs/running-on-railway">official guide on hosting it on Railway</a></p> <p>First of all, we must fork the repository. This will help us make changes to the source code to fit our own needs and more importantly, receive updates in the future (as we will see later in the tutorial). Head over to the <a href="https://github.com/mikecao/umami">Umami GitHub repository</a> and click on fork on the top-right corner -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645084023444/UIfe4bLPm.png" alt="image.png"/></p> <p>You may be asked to select your personal account or an organization if you are in any. I would recommend going for personal account unless it is for an organization.</p> <p>Once you have signed up for an account, click on ‚ÄúNew Project‚Äù (note that I already have an existing project and hence the layout looks like this. It may be different for you) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645083729581/NrhvEnIUM.png" alt="image.png"/></p> <p>Now, select ‚ÄúDeploy from Repo‚Äù on the new project screen -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645084230742/IsU6U7Fb2.png" alt="image.png"/></p> <p>Do note that if you didn‚Äôt sign up with GitHub, you will be prompted to connect your GitHub account.</p> <p>Search and select Umami there.</p> <p>Make sure that the master branch has been selected. Now click on deploy -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085133125/PEO4Np0hp.png" alt="image.png"/></p> <p>This might take some time (2-5 minutes).</p> <p>This is how it should look like after deploying (do note that I am currently using the Metro UI and the layout might look a little different) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085314989/SGu2FefSM.png" alt="image.png"/></p> <p>Now, we need to add a database. We are going to be using PostgreSQL for this example. Now, Railway has built-in support for databases and hence we can spin up a PostgreSQL instance within Railway itself for free.</p> <p>Click on this ‚ÄúNew‚Äù button -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085285069/quu1-MwRS.png" alt="image.png"/></p> <p>Select ‚ÄúDatabases‚Äù and then select ‚ÄúPostgreSQL‚Äù -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085252955/_pxkdwdGj.png" alt="image.png"/></p> <p>This might take some time as well.</p> <p>Do note that if you are using the old UI, you have to select the ‚ÄúAdd Plugin‚Äù button.</p> <p>Now, we need to add two environment variables, <code class="language-plaintext highlighter-rouge">PORT</code> and <code class="language-plaintext highlighter-rouge">HASH_SALT</code>. Click on the card that says ‚Äúumami‚Äù and go to the ‚ÄúVariables‚Äù tab -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085586275/6b3hX2IJX.png" alt="image.png"/></p> <p>In the old UI, there will be a button called ‚ÄúVariables‚Äù in the sidebar. Click that and then add the following variables under ‚Äúcustom‚Äù.</p> <p>We need to put a random string for the <code class="language-plaintext highlighter-rouge">HASH_SALT</code> environment variable. Use any random string generator like <a href="https://devkit.one/generators/random-string">this one</a>. Let us go with 20 characters including uppercase and lowercase letters, numbers, and symbols -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086073622/Oaa9dkb2U.png" alt="image.png"/></p> <p>Now paste that into Railway and click ‚ÄúAdd‚Äù -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086092990/Z5TMAndNtH.png" alt="image.png"/></p> <p>Also, add an environment variable called <code class="language-plaintext highlighter-rouge">PORT</code> and set it to <code class="language-plaintext highlighter-rouge">3000</code> -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086013249/TBX1KtxPZ.png" alt="image.png"/></p> <p>Note that Railway will redeploy our application every time we add an environment variable.</p> <h3 id="setting-up-our-database-schema">Setting up our database schema</h3> <p>Now, we need to make tables in our database. For this, we need to locally clone the project. Go ahead and clone it with git and open a terminal in that repository (I am using the GitHub CLI to clone here but you can use <code class="language-plaintext highlighter-rouge">git</code> as well) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086274311/ESnkCPq02.png" alt="image.png"/></p> <p>Now, we need to <a href="https://docs.railway.app/develop/cli">install the Railway CLI</a>. You can install it with NPM with the following command -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-g</span> @railway/cli
</code></pre></div></div> <p>You can also install it with <a href="https://brew.sh/">Homebrew</a> with the following command -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>railwayapp/railway/railway
</code></pre></div></div> <p>Now run the following command to authenticate the CLI with your Railway account -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway login
</code></pre></div></div> <p>Note that if you face any issues while doing this, you can also try logging in with the following command -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway login <span class="nt">--browserless</span>
</code></pre></div></div> <p>Now run the following command to link the local directory with your Railway project -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway <span class="nb">link</span>
</code></pre></div></div> <p>Now head over to Railway and click the PostgreSQL card and go to the ‚ÄúVariables‚Äù tab -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086844780/5Z7sCtfB6.png" alt="image.png"/></p> <p>Now run the following command in the terminal -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway run psql <span class="nt">-h</span> PGHOST <span class="nt">-U</span> PGUSER <span class="nt">-d</span> PGDATABASE <span class="nt">-f</span> sql/schema.postgresql.sql
</code></pre></div></div> <p>Replace the values caps with their corresponding values from the Railway dashboard (from the environment variables tab for PostgreSQL from the previous step)</p> <p>Now press enter to run the command.</p> <p>Do note that you need the PostgreSQL CLI for this. If you don‚Äôt have it, you can follow <a href="https://www.timescale.com/blog/how-to-install-psql-on-mac-ubuntu-debian-windows/">this guide to install it</a>.</p> <p>Now run the following command to deploy it -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway up
</code></pre></div></div> <p>Hooray, we have successfully deployed Umami ü•≥</p> <h2 id="using-umami">Using Umami</h2> <p>After deploying, you will get an URL to deployment logged on to your CLI. You can also retrieve this URL from the Railway web app.</p> <p>You can also set up a custom subdomain (or even a custom domain) from the Umami dashboard -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645087633934/7mcDLz429.png" alt="image.png"/></p> <p>You will see a login screen now. The username is ‚Äúadmin‚Äù and the default password is ‚Äúumami‚Äù (we will change this).</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645087925651/mO7f7rbEO.png" alt="image.png"/></p> <p>Our dashboard should look like this now -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645087905782/XJLyLBPL1.png" alt="image.png"/></p> <p>Now, there is a banner saying there is a new version out! While writing this tutorial, <a href="https://github.com/mikecao">Mikecao</a>, the creator of Umami, pushed a new version üòÖ</p> <p>Now, that is a good thing because now I get to show you how to update Umami üòé</p> <p>Before that, let us just quickly change our password as ‚Äúumami‚Äù isn‚Äôt a secure password.</p> <p>Head over to Settings ‚Äì&gt; Profile and click on ‚ÄúChange Password‚Äù</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088278499/VheBGhUUXY.png" alt="image.png"/></p> <p>Enter ‚Äúumami‚Äù in the ‚ÄúCurrent Password‚Äù field and then set a new secure password and click ‚ÄúSave‚Äù -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088387324/VmfJRvZft.png" alt="image.png"/></p> <h3 id="updating-umami">Updating Umami</h3> <p>Head over to the forked Umami repository on GitHub. You should see that our branch is behind by a few commits -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088470198/r7hgqcKVi.png" alt="image.png"/></p> <p>Click on ‚ÄúFetch Upstream‚Äù and then ‚ÄúFetch and merge‚Äù -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088510722/8sBS4wExL.png" alt="image.png"/></p> <p>That is it! A new deployment will be initiated on Railway and in a few minutes, you should be up and running the latest version -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088575876/UhIEb2SZl.png" alt="image.png"/></p> <h2 id="adding-umami-to-a-nextjs-website">Adding Umami to a NextJS website</h2> <p>Now, let us look at adding Umami to a NextJS website. For this let us first create a new NextJS application (note that it will work with existing NextJS applications as well) -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app umami-tutorial
</code></pre></div></div> <p>Let us now move into that directory -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>umami-tutorial
</code></pre></div></div> <p>Now, open it in your favorite text editor. We will be using VSCode for this tutorial -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code <span class="nb">.</span>
</code></pre></div></div> <p>Now, open the <code class="language-plaintext highlighter-rouge">pages/_app.js</code> file. It should look like this -</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">../styles/globals.css</span><span class="dl">'</span>

<span class="kd">function</span> <span class="nx">MyApp</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyApp</span>
</code></pre></div></div> <p>Now, let us add the script tag for Umami. This is how our <code class="language-plaintext highlighter-rouge">_app.js</code> should look like now -</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Script</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/script</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">../styles/globals.css</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">MyApp</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="si">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_SCRIPT_URL</span> <span class="o">&amp;&amp;</span>
        <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_WEBSITE_ID</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
          <span class="p">&lt;</span><span class="nc">Script</span>
            <span class="na">src</span><span class="p">=</span><span class="si">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_SCRIPT_URL</span><span class="si">}</span>
            <span class="na">data-website-id</span><span class="p">=</span><span class="si">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_WEBSITE_ID</span><span class="si">}</span>
            <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span>
          <span class="p">/&gt;</span>
        <span class="p">)</span><span class="si">}</span>
      <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyApp</span><span class="p">;</span>
</code></pre></div></div> <p>Here, we are using the <a href="https://nextjs.org/docs/api-reference/next/script">NextJS Script component</a> and lazy loading the script so that it doesn‚Äôt block our website from loading.</p> <p>We will also need to add the environment variables but before that, we need to add the website to Umami.</p> <p>Head over to Umami and then to Settings ‚Äì&gt; Websites -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090114917/h3EVdgmDM.png" alt="image.png"/></p> <p>Now, click on ‚ÄúAdd website‚Äù</p> <p>I am naming this ‚ÄúUmami Tutorial‚Äù but you can name it whatever you want to. In the next field, make sure to enter the domain and NOT THE URL to the website.</p> <p>Note that I have quickly created a GitHub repository and deployed this NextJS app to <a href="https://vercel.com/">Vercel</a>. I have also checked ‚ÄúEnable Share URL‚Äù so that I can share the analytics for this website with you guys üòÅ</p> <p><a href="https://umami-tutorial.up.railway.app/share/3lOPyajp/Umami%20Tutorial">Here</a> it is.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090318295/8b01p6l-xH.png" alt="image.png"/></p> <p>Now, click on ‚ÄúSave‚Äù and then ‚ÄúGet tracking code‚Äù -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090384630/csMsmGMW7.png" alt="image.png"/></p> <p>From the modal that appears, just copy the values of <code class="language-plaintext highlighter-rouge">data-website-id</code> and <code class="language-plaintext highlighter-rouge">src</code> -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090430194/_Ep6VvsVs.png" alt="image.png"/></p> <p>Now, create a new file in your NextJS app called <code class="language-plaintext highlighter-rouge">.env.local</code> and add the following environment variables -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_UMAMI_SCRIPT_URL= # Your script URL, the value under `src`
NEXT_PUBLIC_UMAMI_WEBSITE_ID= # The website's id, the value under `data-website-id`
</code></pre></div></div> <p>Now, visit the website on your browser and take a look at the Umami dashboard, it should record a view and a visit under the ‚ÄúRealtime‚Äù tab -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090808765/DClWJJP28.png" alt="image.png"/></p> <p>We can see more detailed analytics under the details page of the website -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090870636/yVqIm4_VA.png" alt="image.png"/></p> <p>More data will pile up as you start getting visitors on your site</p> <p>Note: Some browsers like brave have in-built ad-blockers which blocks such scripts from loading in many cases. Even third-party ad-blockers can be responsible for this.</p> <p>If no data is showing up in your Umami dashboard, try a browser without ad-blockers (or private mode), try restarting your development server, and make sure that the values of the environment variables are right.</p> <p>Woohoo, that was a lot!</p> <h2 id="conclusion">Conclusion</h2> <p>We got Umami set up and running and added analytics to a NextJS application. Umami does a lot more like recording events. Take a look at <a href="https://umami.is/docs">their documentation</a> for more information.</p> <p>I hope everything worked out for you. Do feel free to comment on this article or reach out to me on <a href="https://twitter.com/AnishDe12020">Twitter</a> and I will help you out üòÑ</p> <h2 id="important-links">Important Links</h2> <ul> <li><a href="https://umami.is/">Umami</a></li> <li><a href="https://railway.app/">Railway</a></li> <li><a href="https://github.com/AnishDe12020/umami-tutorial">Repository</a> for this tutorial</li> </ul>]]></content><author><name>anishde12020</name></author><category term="web"/><category term="next-js"/><category term="tools"/><category term="free-stuff"/><summary type="html"><![CDATA[A guide on settting up Umami on Railway and adding it to a Next.js project.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1645091755632/-NyymMbeL.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1645091755632/-NyymMbeL.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build a blog using Remix and MDX</title><link href="https://genicsblog.com/kira/how-to-build-a-blog-using-remix-and-mdx" rel="alternate" type="text/html" title="How to build a blog using Remix and MDX"/><published>2022-02-14T00:00:00+00:00</published><updated>2022-02-14T00:00:00+00:00</updated><id>https://genicsblog.com/kira/how-to-build-a-blog-using-remix-and-mdx</id><content type="html" xml:base="https://genicsblog.com/kira/how-to-build-a-blog-using-remix-and-mdx"><![CDATA[<p>Hey, folks üëã. Today we are going to build a new blog from scratch using <a href="https://remix.run/">Remix</a>, <a href="https://mdxjs.com/">MDX</a> and <a href="https://tailwindcss.com/">TailwindCSS</a></p> <h1 id="-whats-remix-yet-another-javascript-framework">ü§î What‚Äôs Remix? Yet another JavaScript framework</h1> <p>Remix is a full-stack web framework based on web fundamentals and modern UX. It is created by the team of <a href="https://reactrouter.com/">React Router</a>. Remix isn‚Äôt any brand new framework it had been over for a year but it was a paid framework over then but now the time had been changed and Remix is now free and open-source software üöÄ.</p> <p>Remix is a React-based framework that allows to you render code on the server-side. Wait for a second ü§î Doesn‚Äôt <a href="https://nextjs.org/">NextJS</a> do the same thing?</p> <p>Remix took the old problems but approached them in a new style üê±‚Äçüíª.</p> <p>Remix only does Server Side Rendering (SSG), no Static Site Generation (SSG), and Incremental Static Regeneration (ISR) like NextJS.</p> <p>Applications which use Static Site Generation (SSG) are fast, easy to deploy but it is really hard to use dynamic data, as the pages would be re-built every time the dynamic data has been changed. In Remix, we are only doing Server Side Rendering (SSG), which is great for dynamic data but it would be hard to deploy as you would need to have an actual server to run it.</p> <p>Remix is suitable for applications that have multiple pages and which depend on some sort of dynamic data</p> <h1 id="-setting-up-the-project">üõ† Setting up the project</h1> <p>Let‚Äôs set up our project before getting started to code.</p> <ol> <li> <p>Create a new folder for our remix blog</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>remix-blog
</code></pre></div> </div> </li> <li> <p>Navigate into that folder</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>remix-blog
</code></pre></div> </div> </li> <li> <p>Open that folder in VSCode</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code <span class="nb">.</span>
</code></pre></div> </div> </li> <li> <p>Initialize remix project in that folder</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-remix@latest
</code></pre></div> </div> <ul> <li>The path of the remix application would be <code class="language-plaintext highlighter-rouge">./</code>, as we have already created a folder of our project</li> <li>We would be going to deploy our remix application on <a href="https://vercel.com">Vercel</a></li> <li>We are going to be using JavaScript for this project</li> </ul> </li> <li> <p>Starting a local development server</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run dev
</code></pre></div> </div> <p>This would start a local development server at <a href="http://localhost:3000">localhost:3000</a></p> </li> </ol> <h1 id="-understanding-the-folder-structure">üìÅ Understanding the folder structure</h1> <p>The folder structure of a remix application is pretty simple.</p> <ul> <li><code class="language-plaintext highlighter-rouge">api</code> folder contains all the backend/api code.</li> <li><code class="language-plaintext highlighter-rouge">app</code> folder contains most of the frontend code. <ul> <li><code class="language-plaintext highlighter-rouge">app/routes</code> folder contains the code for each route. Remix has the file-system based router similar to nextjs</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">public</code> folder contains the static files and assets that are served to the browser when our app is built or deployed.</li> </ul> <h1 id="-building-the-project">üë®‚Äçüíª Building the project</h1> <p>Let‚Äôs start building the blog now. Let‚Äôs first clean up the <code class="language-plaintext highlighter-rouge">app/routes/index.jsx</code> file.</p> <p><code class="language-plaintext highlighter-rouge">app/routes/index.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Index</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="err">‚Äé</span><span class="p">{</span> <span class="nl">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">system-ui, sans-serif</span><span class="dl">'</span><span class="p">,</span> <span class="nx">lineHeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1.4</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome to my blog<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Remix supports the use of MDX to create a route module, which means we could create a new route using just a plain MDX file.</p> <p>Let‚Äôs create a new directory inside the <code class="language-plaintext highlighter-rouge">routes</code> directory called <code class="language-plaintext highlighter-rouge">posts</code> and inside that directory let‚Äôs create a new file called <code class="language-plaintext highlighter-rouge">first-blog-post.mdx</code></p> <p><code class="language-plaintext highlighter-rouge">app/routes/posts/first-blog-post.mdx</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hey, welcome to my first blog post üëã
</code></pre></div></div> <p>To check out your first blog post, visit <a href="http://localhost:3000/posts/first-blog-post">localhost:3000/posts/first-blog-post</a></p> <p><strong>TADA</strong> üéâ, we have built a basic blog within 2 minutes</p> <p><img src="https://imgur.com/x5a8ovB.png" alt=""/></p> <h2 id="-adding-frontmatter">üôå Adding frontmatter</h2> <p>The lines in the document above between the <code class="language-plaintext highlighter-rouge">---</code> are called ‚Äúfrontmatter‚Äù</p> <p>Let‚Äôs add some front matter to your first blog post page. You can think frontmatter as the metadata of that page.</p> <p>You can reference your frontmatter fields through the global attributes variable in your MDX.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: First Blog Post
---

Hey, welcome to {attributes.title} üëã
</code></pre></div></div> <p>Let‚Äôs now add metadata to our blog post‚Äôs page using frontmatter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: First Blog Post
meta:
  title: First Blog Post
  description: ‚ú® WoW
---

Hey, welcome to {attributes.title} üëã
</code></pre></div></div> <p>As you can see the title of the page has been changed</p> <p><img src="https://imgur.com/i8ftVOK.png" alt=""/></p> <p>‚Ä¶ and the description as well</p> <p><img src="https://imgur.com/yuFHUf6.png" alt=""/></p> <p>Let‚Äôs me quickly add a few blog posts</p> <p><img src="https://imgur.com/vI9iG0F.png" alt=""/></p> <p>Umm‚Ä¶ ü§î Our blog isn‚Äôt completed yet with any kind of syntax highlighting ‚ú®</p> <h2 id="-adding-syntax-highlighting">‚ú® Adding syntax highlighting</h2> <p>We are going to be using <a href="https://highlightjs.org/">highlight.js</a> for syntax highlighting, you could even use <a href="https://prismjs.com/">prism</a>.</p> <h3 id="-about-mdx-plugins">üîå About MDX plugins</h3> <p>We are going to achieve syntax highlighting using something called ‚ÄúMDX plugins‚Äù. By plugins, we could manipulate the process of MDX converting into HTML.</p> <p>Generally, there are two types of plugins</p> <ul> <li> <p>Remark plugins are responsible for manipulating the process of converting MDX to markdown.</p> </li> <li> <p>Rehype plugins are responsible for manipulating the process of converting the markdown to HTML.</p> </li> </ul> <p>For our remix blog, we are going to be using a rehype plugin called <a href="https://www.npmjs.com/package/rehype-highlight">rehype-highlight</a>. To install the package using the following command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>rehype-highlight
</code></pre></div></div> <p>We need to add a bit of configuration to the <code class="language-plaintext highlighter-rouge">remix.config.js</code> file</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mdx</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">]</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">rehype-highlight</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">mod</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">mod</span><span class="p">.</span><span class="k">default</span><span class="p">),</span>
  <span class="p">]);</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">rehypePlugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">],</span>
  <span class="p">};</span>
<span class="p">};</span>
</code></pre></div></div> <p>Now our <code class="language-plaintext highlighter-rouge">remix.config.js</code> file would look something like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @type {import('@remix-run/dev/config').AppConfig}
 */</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">appDirectory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">assetsBuildDirectory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public/build</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">publicPath</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/build/</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">serverBuildDirectory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">api/_build</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">ignoredRouteFiles</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.*</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">mdx</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">]</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
      <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">rehype-highlight</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">mod</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">mod</span><span class="p">.</span><span class="k">default</span><span class="p">),</span>
    <span class="p">]);</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">rehypePlugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">],</span>
    <span class="p">};</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="-creating-a-layout-file">üßæ Creating a layout file</h3> <p>Now we have created a layout file, where we would import one of the highlight.js‚Äôs styling. I would be using night owl style, you could choose your style from highlight.js‚Äôs <a href="https://highlightjs.org/static/demo/">style demo page</a></p> <p>To create a layout file for our blog posts, we have created a new file with the same name as the folder name (<code class="language-plaintext highlighter-rouge">posts</code>) and the same level of the <code class="language-plaintext highlighter-rouge">posts</code> folder.</p> <p><img src="https://imgur.com/MtEUjC0.png" alt=""/></p> <p>Now we have to import the night owl theme into our layout file and use that as well.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">highlight.js/styles/night-owl.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Outlet</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">remix</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">links</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">rel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stylesheet</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">href</span><span class="p">:</span> <span class="nx">styles</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Posts</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Outlet</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p>In remix, we have the links function is similar to the links tag in HTML.</p> <blockquote> <p>PS: If you are a VSCode user then install this <a href="https://marketplace.visualstudio.com/items?itemName=amimaro.remix-run-snippets">remix run snippets extension</a> üöÄ.</p> </blockquote> <p>Now let‚Äôs restart our local development server.</p> <p><strong>TADA</strong> üéâ, we have this wonderful syntax highlighting for our code blocks in our blog now</p> <p><img src="https://imgur.com/brpUvDo.png" alt=""/></p> <h2 id="-adding-tailwindcss-typography">üé® Adding TailwindCSS Typography</h2> <p>Right now our blog has syntax highlight but the font isn‚Äôt looking great ü§î and there is nothing great than <a href="https://tailwindcss.com/docs/typography-plugin">@tailwindcss/typography</a> plugin to automatically styles our entire page‚Äôs using a single <code class="language-plaintext highlighter-rouge">prose</code> class.</p> <h3 id="-installing-dependencies">üì¶ Installing dependencies</h3> <p>We need a few dependencies for us to use tailwindcss and tailwindcss‚Äôs typography plugin.</p> <p>Those dependencies are:</p> <ul> <li><a href="https://www.npmjs.com/package/concurrently">Concurrently</a>: Concurrently allows you to run multiple commands in a single terminal, so we can watch and build our tailwindcss styles as well as our entire remix application in a single terminal session</li> </ul> <p>Let‚Äôs install all of them:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-D</span> tailwindcss concurrently @tailwindcss/typography
</code></pre></div></div> <h3 id="-configuring-tailwindcss">‚öô Configuring TailwindCSS</h3> <p>Create a new file named <code class="language-plaintext highlighter-rouge">tailwind.config.js</code>, this file would contain all the configurations for tailwindcss.</p> <p>Add the following configuration to the <code class="language-plaintext highlighter-rouge">tailwind.config.js</code> file</p> <p><code class="language-plaintext highlighter-rouge">tailwind.config.js</code></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jit</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">purge</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./app/**/*.{ts,tsx}</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">darkMode</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// or 'media' or 'class'</span>
  <span class="na">theme</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">extend</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">},</span>
  <span class="na">variants</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">extend</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@tailwindcss/typography</span><span class="dl">'</span><span class="p">)],</span>
<span class="p">};</span>
</code></pre></div></div> <p>We would have to change the scripts in <code class="language-plaintext highlighter-rouge">package.json</code></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm run build:css &amp;&amp; remix build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build:css"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tailwindcss -o ./app/tailwind.css"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"concurrently </span><span class="se">\"</span><span class="s2">npm run dev:css</span><span class="se">\"</span><span class="s2"> </span><span class="se">\"</span><span class="s2">remix dev</span><span class="se">\"</span><span class="s2">"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev:css"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tailwindcss -o ./app/tailwind.css --watch"</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>Importing tailwindcss into the <code class="language-plaintext highlighter-rouge">app/root.jsx</code> file</p> <p><code class="language-plaintext highlighter-rouge">app/root.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./tailwind.css</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">links</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[{</span> <span class="na">rel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stylesheet</span><span class="dl">'</span><span class="p">,</span> <span class="na">href</span><span class="p">:</span> <span class="nx">styles</span> <span class="p">}];</span>
<span class="p">};</span>
</code></pre></div></div> <p>Let‚Äôs restart our server and run the <code class="language-plaintext highlighter-rouge">npm run dev</code> command</p> <p>You would see an error saying that</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app/root.jsx:9:19: error: Could not resolve "./tailwind.css
</code></pre></div></div> <p><img src="https://imgur.com/iHGXcv1.png" alt=""/></p> <p>This occurred because there is no <code class="language-plaintext highlighter-rouge">tailwind.css</code> file but you would see that the file is been created. If in your case the file didn‚Äôt create then create a new file named <code class="language-plaintext highlighter-rouge">tailwind.css</code> in the <code class="language-plaintext highlighter-rouge">app</code> directory and copy and paste the CSS from this gist, https://gist.github.com/Kira272921/4541f16d37e6ab4d278ccdcaf3c7e36b</p> <h3 id="-using-tailwindcsstypography-plugin">üíª Using @tailwindcss/typography plugin</h3> <p>Let‚Äôs open the <code class="language-plaintext highlighter-rouge">app/routes/posts.jsx</code> file and add few styling.</p> <blockquote> <p>As <code class="language-plaintext highlighter-rouge">app/routes/posts.jsx</code> file is the layout file for all the blog posts, if few add any kind of styling then it would reflect in the blog posts pages</p> </blockquote> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'flex justify-center'</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'prose lg:prose-xl py-10'</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Outlet</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <p>Here are using the <code class="language-plaintext highlighter-rouge">@tailwindcss/typography</code> plugin</p> <p><strong>TADA</strong> üéâ. Look how beautiful the blog posts are looking now</p> <p><img src="https://imgur.com/v84Sreb.png" alt=""/></p> <h2 id="-creating-a-list-of-articles">üì∞ Creating a list of articles</h2> <p>Let‚Äôs create a list of articles on the main page (aka root route).</p> <p>In remix, you could import the entire mdx module as well as the attributes within them.</p> <p><code class="language-plaintext highlighter-rouge">app/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">firstPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-cli-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">secondPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-rest-api-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <p>The below function would return the slug (the file name, without the <code class="language-plaintext highlighter-rouge">.mdx</code>) with the markdown attributes</p> <p><code class="language-plaintext highlighter-rouge">app/index.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">mod</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">slug</span><span class="p">:</span> <span class="nx">mod</span><span class="p">.</span><span class="nx">filename</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\.</span><span class="sr">mdx</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span> <span class="dl">''</span><span class="p">),</span>
    <span class="p">...</span><span class="nx">mod</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">meta</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>In remix, we use a loader function to load data on the server-side</p> <p><code class="language-plaintext highlighter-rouge">app/index.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">loader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">postFromModule</span><span class="p">(</span><span class="nx">firstPost</span><span class="p">),</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">secondPost</span><span class="p">)];</span>
<span class="p">};</span>
</code></pre></div></div> <p>Here we are loading each of our MDX modules on the server-side using the loader function</p> <p>Finally, our <code class="language-plaintext highlighter-rouge">app/index.jsx</code> would look something like this</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span><span class="p">,</span> <span class="nx">useLoaderData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">remix</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">firstPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-cli-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">secondPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-rest-api-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">mod</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">slug</span><span class="p">:</span> <span class="nx">mod</span><span class="p">.</span><span class="nx">filename</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\.</span><span class="sr">mdx</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span> <span class="dl">''</span><span class="p">),</span>
    <span class="p">...</span><span class="nx">mod</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">meta</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">loader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">postFromModule</span><span class="p">(</span><span class="nx">firstPost</span><span class="p">),</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">secondPost</span><span class="p">)];</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">BlogIndex</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">posts</span> <span class="o">=</span> <span class="nx">useLoaderData</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'prose lg:prose-xl py-10 pl-10'</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Articles<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'flex justify-center'</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">posts</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">post</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">posts/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">post</span><span class="p">.</span><span class="nx">slug</span><span class="si">}</span><span class="p">&gt;</span>
              <span class="p">&lt;</span><span class="nc">Link</span> <span class="na">to</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">posts/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">post</span><span class="p">.</span><span class="nx">slug</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Link</span><span class="p">&gt;</span>
              <span class="si">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">description</span> <span class="p">?</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">'m-0 lg:m-0'</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">description</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
              <span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="si">}</span>
            <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
          <span class="p">))</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>This is how our main page looks üöÄ <img src="https://imgur.com/pmTnI47.png" alt=""/></p> <h2 id="-deploying-to-vercel">üöÄ Deploying to Vercel</h2> <p>As our application let‚Äôs deploy it on vercel üöÄ.</p> <ol> <li> <p>Initialize an empty git repository</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div> </div> </li> <li> <p>Create a new GitHub repository</p> </li> <li> <p>Push your changes to that repository</p> </li> </ol> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git remote add origin git@github.com:Kira272921/remix-blog.git <span class="c"># change URL to your repo's link</span>
  git add <span class="nb">.</span>
  git commit <span class="nt">-m</span> <span class="s2">"feat: initial commit"</span>
  git branch <span class="nt">-M</span> main
  git push <span class="nt">-u</span> origin main
</code></pre></div></div> <ol> <li> <p>If you don‚Äôt have an account on vercel, create one</p> </li> <li> <p>Create a new project</p> <p><img src="https://imgur.com/9wfhEQ9.png" alt=""/></p> </li> <li> <p>Import the remix application from our GitHub account</p> <p><img src="https://imgur.com/EMKOgOs.png" alt=""/></p> </li> <li> <p>Deploy the application</p> <p><img src="https://imgur.com/fgIkn2L.png" alt=""/></p> <ul> <li> <p>If you are getting an error something like this, add a new script to <code class="language-plaintext highlighter-rouge">package.json</code></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"postinstall"</span><span class="p">:</span><span class="w"> </span><span class="s2">"remix setup node"</span><span class="w">
</span></code></pre></div> </div> <p><img src="https://imgur.com/PAG3nla.png" alt=""/></p> </li> </ul> </li> </ol> <p>The entire code for this tutorial is present on <a href="https://github.com/kira272921/remix-blog">my GitHub</a>.</p> <p><a href="https://remix-blog-orcin.vercel.app/">Here</a> is what we have built today üöÄ</p> <h3 id="-about-the-author">üßë About the author</h3> <ul> <li><a href="https://kiradev.co">Portfolio</a></li> <li><a href="https://github.com/kira272921">Github</a></li> </ul> <p>So that‚Äôs it for this blog post folks ü§û. Meet y‚Äôall in the next blog.</p>]]></content><author><name>kira</name></author><category term="frontend"/><category term="react"/><category term="remix"/><summary type="html"><![CDATA[The guide to teach you how to build a blog using the latest javascript framework, Remix üöÄ.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/90365542/153700424-ffc22df1-7d4d-4530-983d-01eb5348807a.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/90365542/153700424-ffc22df1-7d4d-4530-983d-01eb5348807a.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">GitHub Repositories to Crush any Programming Interview</title><link href="https://genicsblog.com/github-repositories-to-crush-any-programming-interview" rel="alternate" type="text/html" title="GitHub Repositories to Crush any Programming Interview"/><published>2022-02-13T00:00:00+00:00</published><updated>2022-02-13T00:00:00+00:00</updated><id>https://genicsblog.com/github-repositories-to-crush-any-programming-interview</id><content type="html" xml:base="https://genicsblog.com/github-repositories-to-crush-any-programming-interview"><![CDATA[<p>Programming Interviews may be frustrating and tough. If you have any phobia regarding programming interviews, have no fear, because this articles is for you.</p> <p>Today I‚Äôll be disclosing some repositories, you can visit to ace in any programming interviews. These were rated based on popularity, usability and reliability.</p> <h2 id="1-coding-interview-university">1. Coding Interview University</h2> <p><img src="https://i.imgur.com/UtbdPhu.png" alt="Coding Interview University"/></p> <p>This repository helps students prepare for companies like Amazon, Microsoft, Apple, etc. Some of the key features are :</p> <ul> <li>This is my multi-month study plan to become a software engineer for a large company.</li> <li>If you missed out on getting a degree in computer science, this will catch you up and save four years of your life.</li> <li>Note this is a study plan for software engineering, not web development. Large software companies like Google, Amazon, Facebook and Microsoft view software engineering as different from web development.</li> <li>The repository carefully differentiate between the topics, into Planning, Topic, and optional topics to cover to get a edge over others.</li> <li>It‚Äôs a long plan. It may take you months. However, if you are familiar with a lot of this already it will take you a lot less time.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/jwasham/coding-interview-university" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="2-tech-interview-handbook">2. Tech Interview Handbook</h2> <p><img src="https://i.imgur.com/OySmku6.png" alt="Tech Interview Handbook"/></p> <p>It has curated interview preparation materials for busy engineers. Some of the key elements are :</p> <ul> <li>There are free and curated technical interview preparation materials for busy engineers, brought to you by the author of the Blind 75 list.</li> <li>Besides the usual algorithm questions, it includes ‚ÄúBest practice questions for coding interviews‚Äù, ‚ÄúHow to prepare for coding interviews‚Äù, ‚ÄúStraight-to-the-point Do‚Äôs and Don‚Äôts‚Äù, ‚ÄúAlgorithm tips categorized by topic‚Äù, and many more.</li> <li>This repository has practical content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful.</li> <li>The key to succeeding in technical interviews is consistent practice. It doesn‚Äôt bore you with too many words, and keeps everything to the point.</li> <li>The difference between this repository and others is that many existing interview repositories contain mainly links to external resources whereas this repository contains top-quality curated content directly for your consumption.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/yangshun/tech-interview-handbook" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="3-javascript-interview-questions">3. Javascript Interview Questions</h2> <p><img src="https://i.imgur.com/7WL4M2b.png" alt="Javascript Interview Questions"/></p> <p>This repo contains a huge list of 1000 JavaScripts Interview Questions. Some of the main features are :</p> <ul> <li>Take this JavaScript Projects course to go from a JavaScript beginner to confidently building your own projects.</li> <li>Take this coding interview bootcamp if you‚Äôre serious about getting hired and don‚Äôt have a CS degree.</li> <li>Take this Advanced JavaScript Course to learn advanced JS concepts and become a top JS developer.</li> <li>You can download the PDF and Epub version of this repository.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/sudheerj/javascript-interview-questions" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="4-javascript-algorithms">4. JavaScript Algorithms</h2> <p><img src="https://i.imgur.com/YDMQUNo.png" alt="JavaScript Algorithms"/></p> <p>It has JavaScript based examples of many popular algorithms and data structures explained. Some of the key features are :</p> <ul> <li>Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).</li> <li>The beginners and advanced are separated by using symbols <code class="language-plaintext highlighter-rouge">B</code> and <code class="language-plaintext highlighter-rouge">A</code> respectively.</li> <li>This repository has a seperate content for each topic in a systematic way.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="5-how-web-works">5. How Web Works</h2> <p><img src="https://i.imgur.com/QI8EVky.png" alt="How Web Works" width="50%"/></p> <p>It helps to learn What happens behind the scenes when we type a URL in a browser. Let‚Äôs look at some of the features :</p> <ul> <li>If you wonder what happens behind the scenes when we type google.com in a browser, then you definitely need to check this out.</li> <li>This repository goes through a lot of minute details.</li> <li>This repository covers stuffs like DNS lookup, Opening of a socket + TLS handshake, HTTP Server Request Handle, The browser‚Äôs high level structure, and many more.</li> <li>This repository doesn‚Äôt waste much time and directly dives into the topic.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/vasanthk/how-web-works" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="6-interview">6. Interview</h2> <p><img src="https://i.imgur.com/nTjuurt.png" alt="Interview" width="50%"/></p> <p>This repo contains everything you need to prepare for your technical interview. Some features include :</p> <ul> <li>Lists of books to learn algorithms.</li> <li>List of websites to practice coding.</li> <li>Guides you may need.</li> <li>It also contains list of book specifically for job interviews and needs of industries.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/Olshansk/interview" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="7-system-design-primer">7. System Design Primer</h2> <p><img src="https://i.imgur.com/92JYYEj.png" alt="System Design Primer" width="50%"/></p> <p>It helps to learn how to design large-scale systems. Preparation for the system design interview. Some features like:</p> <ul> <li>Learning how to design scalable systems will help to become a better engineer. System design is a broad topic. There is a vast amount of resources scattered throughout the web on system design principles.</li> <li>This repo is an organized collection of resources to help you learn how to build systems at scale.</li> <li>This is a continually updated, open source project.</li> <li>In addition to coding interviews, system design is a required component of the technical interview process at many tech companies. Practice common system design interview questions and compare your results with sample solutions: discussions, code, and diagrams.</li> <li>Also contains additional for interview preparation.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="8-how-to-secure-anything">8. How to secure anything</h2> <p><img src="https://i.imgur.com/bgspVPq.png" alt="How to secure anything"/></p> <p>This repo contains everything you need to learn on security engineering. Like :</p> <ul> <li>Its lessons are not just applicable to computer security.</li> <li>This repository aims to document a process for securing anything, whether it‚Äôs a medieval castle, an art museum, or a computer network.</li> <li>Even you can contribute for this article.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/veeral-patel/how-to-secure-anything" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="9-ganqqwerty">9. Ganqqwerty</h2> <p><img src="https://i.imgur.com/DWg2bPc.png" alt="Ganqqwerty" width="40%"/></p> <p>This repo has 123 essential JavaScript Questions to prepare for interview. Some features include :</p> <ul> <li>This book‚Äôs goal is to help javascript frontend developers prepare for technical job interviews through a collection of carefully compiled questions.</li> <li>You can even get this in paperback format. This repository is still getting updated, so for early access you can visit this repository.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/ganqqwerty/123-Essential-JavaScript-Interview-Questions" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="10-javascript-question">10. JavaScript Question</h2> <p><img src="https://i.imgur.com/alD4VBP.png" alt="JavaScript Question"/></p> <p>It is a long list of advance JavaScript questions, and their explanations. Some of the key features are:</p> <ul> <li>From basic to advanced: test how well you know JavaScript, refresh your knowledge a bit, or prepare for your coding interview.</li> <li>This repository gets updated daily, so new questions are added every day.</li> <li>The questions also come with explanation along with answers.</li> <li>The repository covers almost every single type of question, one can expect in an interview.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/lydiahallie/javascript-questions" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="thank-you-for-reading">Thank you for reading!</h2> <p>I write blogs on programming, web development, and current technology trend. If you find this article interesting, do share it with others, and comment your thoughts. Follow me on <a href="https://twitter.com/gh_x_st07">twitter</a>.</p> <p>Until We Meet Again, Arindol Sarkar.</p>]]></content><author><name>arindol</name></author><category term="web"/><category term="web-development"/><category term="beginners"/><summary type="html"><![CDATA[These repositories help students to prepare for coding interviews at companies like Amazon, Microsoft, Apple, etc.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/153745097-024d43ec-e7fa-4143-9b64-258b100f7da2.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/153745097-024d43ec-e7fa-4143-9b64-258b100f7da2.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">15 underrated HTML attributes every web developer should know</title><link href="https://genicsblog.com/underrated-html-attributes-every-webdev-should-know" rel="alternate" type="text/html" title="15 underrated HTML attributes every web developer should know"/><published>2022-02-12T00:00:00+00:00</published><updated>2022-02-12T00:00:00+00:00</updated><id>https://genicsblog.com/underrated-html-attributes-every-webdev-should-know</id><content type="html" xml:base="https://genicsblog.com/underrated-html-attributes-every-webdev-should-know"><![CDATA[<p>HTML may not be a programming language per se, but there‚Äôs no doubt in the power it possesses. We often depend on external javascript libraries for some basic tasks, but need for some of them might end today!</p> <p>In this article we will discuss about <strong>15 HTML attributes</strong> you probably did not know, but need to know for sure.</p> <p>Let‚Äôs get started!</p> <h2 id="1-autocomplete">1. Autocomplete</h2> <p>The <code class="language-plaintext highlighter-rouge">autocomplete</code> attributes specifies whether the browser is allowed to aid in filling out the form fields or not. If turned on, it will assist users with autofilling options such as email, phone numbers, nationality, and so on.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"credit-card-number"</span> <span class="na">id=</span><span class="s">"credit-card-number"</span> <span class="na">autocomplete=</span><span class="s">"off"</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>You can check out all the autocomplete values from the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete">MDN docs</a>.</p> <h2 id="2-download">2. Download</h2> <p>The <code class="language-plaintext highlighter-rouge">download</code> attribute on an anchor tag specifies that the file/object should be downloaded to the local storage when a user clicks on the hyperlink.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"document.pdf"</span> <span class="na">download</span><span class="nt">&gt;</span>Download PDF<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <h2 id="3-contenteditable">3. Contenteditable</h2> <p>The <code class="language-plaintext highlighter-rouge">contenteditable</code> attribute allows the user to edit the content of an element.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">contenteditable=</span><span class="s">"true"</span><span class="nt">&gt;</span>
  You can now edit this text!
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h2 id="4-readonly">4. Readonly</h2> <p>The <code class="language-plaintext highlighter-rouge">readonly</code> attribute specifies that an input field is read-only and can‚Äôt be edited.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"sports"</span> <span class="na">name=</span><span class="s">"sports"</span> <span class="na">value=</span><span class="s">"golf"</span> <span class="na">readonly</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>A user can still highlight it, and copy the text. To forbid those actions, use the <code class="language-plaintext highlighter-rouge">disabled</code> attribute instead.</p> <h2 id="5-accept">5. Accept</h2> <p>The <code class="language-plaintext highlighter-rouge">accept</code> attribute states which file types are allowed to be selected in the input.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">accept=</span><span class="s">".jpg, .png"</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>This attribute can only be used on an <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> tag with <code class="language-plaintext highlighter-rouge">type="file"</code>. To allow all files of specific media type, use an asterisk beside its name. For example, <code class="language-plaintext highlighter-rouge">accept="image/*"</code>.</p> <h2 id="6-autofocus">6. Autofocus</h2> <p>The <code class="language-plaintext highlighter-rouge">autofocus</code> attribute indicates that the particular element should be focused on page load.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">autofocus</span><span class="nt">&gt;</span>
</code></pre></div></div> <p><strong>Note</strong>: Only one element in the HTML document or a dialog may have the autofocus attribute. If applied to multiple elements only the first one will receive focus.</p> <h2 id="7-hidden">7. Hidden</h2> <p>The <code class="language-plaintext highlighter-rouge">hidden</code> attribute specifies whether or not the element is visible.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">hidden</span><span class="nt">&gt;</span>I am invincible üí™<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <h2 id="8-spellcheck">8. Spellcheck</h2> <p>The <code class="language-plaintext highlighter-rouge">spellcheck</code> attribute defines whether the element is checked for spelling errors.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">contenteditable=</span><span class="s">"true"</span> <span class="na">spellcheck=</span><span class="s">"true"</span><span class="nt">&gt;</span>Cehck mai spellnig<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <h2 id="9-controls">9. Controls</h2> <p>The <code class="language-plaintext highlighter-rouge">controls</code> attribute specifies whether or not the audio/video controls should be displayed on the default player.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;audio</span> <span class="na">controls</span><span class="nt">&gt;</span>
  <span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">"rick_roll.mp3"</span>  <span class="na">type=</span><span class="s">"audio/mpeg"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/audio&gt;</span>
</code></pre></div></div> <h2 id="10-autoplay">10. Autoplay</h2> <p>The <code class="language-plaintext highlighter-rouge">autoplay</code> attribute ensures that the audio/video will automatically start playing as soon as it is loaded.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;video</span> <span class="na">autoplay</span>
  <span class="na">src=</span><span class="s">"https://cdn.mysite.com/media/myvideo.mp4"</span>
  <span class="na">poster=</span><span class="s">"image.png"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/video&gt;</span>
</code></pre></div></div> <h2 id="11-cite">11. Cite</h2> <p>The <code class="language-plaintext highlighter-rouge">cite</code> attribute is used to point out where a an element‚Äôs content is taken from, or referred to.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote</span> <span class="na">cite=</span><span class="s">"https://genicsblog.com/"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p&gt;</span>An awesome publication for developers.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <h2 id="12-datetime">12. Datetime</h2> <p>The <code class="language-plaintext highlighter-rouge">datetime</code> attribute specifies the date and time when the text was deleted/inserted.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  My plans for 2023 include joining Google as a SDE,
  <span class="nt">&lt;del</span> <span class="na">datetime=</span><span class="s">"2021-01-01T18:21"</span><span class="nt">&gt;</span>creating 6 courses,<span class="nt">&lt;/del&gt;</span> 
  <span class="nt">&lt;ins</span> <span class="na">datetime=</span><span class="s">"2021-02-02T14:07"</span><span class="nt">&gt;</span>writing 12 articles.<span class="nt">&lt;/ins&gt;</span>
<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p&gt;</span>I will evaluate the completion on <span class="nt">&lt;time</span> <span class="na">datetime=</span><span class="s">"2021-12-31"</span><span class="nt">&gt;&lt;/time&gt;</span>.<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <h2 id="13-async">13. Async</h2> <p>The <code class="language-plaintext highlighter-rouge">async</code> attribute ensures the script is executed asynchronously with the rest of the page.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://icanheckyou.com/heckingScript.js"</span> <span class="na">async</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div> <p><strong>Note</strong>: The <code class="language-plaintext highlighter-rouge">async</code> attribute has an effect on external scripts only.</p> <h2 id="14-defer">14. Defer</h2> <p>The <code class="language-plaintext highlighter-rouge">defer</code> attribute ensures the script is executed when the page has finished parsing.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://anotherhecker.com/heckingScriptAgainCozWhyNot.js"</span> <span class="na">defer</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div> <p><strong>Note</strong>: The <code class="language-plaintext highlighter-rouge">defer</code> attribute has an effect on external scripts only.</p> <h2 id="15-inputmode">15. Inputmode</h2> <p>The <code class="language-plaintext highlighter-rouge">inputmode</code> attribute hints at the type of data that might be entered by the user while editing the element or its contents. It also helps the mobile browsers to display the keyboard in the appropriate mode.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">inputmode=</span><span class="s">"url"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">inputmode=</span><span class="s">"email"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">inputmode=</span><span class="s">"numeric"</span> <span class="nt">/&gt;</span>
</code></pre></div></div> <h3 id="thanks-for-reading">Thanks for reading!</h3> <p>I hope this article was able to help you learn more about HTML and share some knowledge with you.</p> <p>If you liked this post, subscribe to my <a href="https://abhirajbhowmick.substack.com">newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my blogs</a>, product launches, and tech news. Follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources!</p>]]></content><author><name>abhiraj</name></author><category term="web"/><category term="web-development"/><category term="tips"/><category term="beginners"/><summary type="html"><![CDATA[There are a few lesser known HTML attributes that are easy to learn and can help you to achieve common tasks, which would otherwise be fulfilled using some external libraries.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/153724225-aa374faa-db20-451f-9291-fcdc4db064cf.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/153724225-aa374faa-db20-451f-9291-fcdc4db064cf.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Genics Log #1: Sponsorship from BeyondWords, Open Source, Organic Stats and more</title><link href="https://genicsblog.com/genics-log-1" rel="alternate" type="text/html" title="Genics Log #1: Sponsorship from BeyondWords, Open Source, Organic Stats and more"/><published>2022-02-10T00:00:00+00:00</published><updated>2022-02-10T00:00:00+00:00</updated><id>https://genicsblog.com/genics-log-1</id><content type="html" xml:base="https://genicsblog.com/genics-log-1"><![CDATA[<p>Hello there, I hope you are doing well!</p> <p>This is the first article in the <a href="/category/genics-log">Genics log</a> series where we will be documenting our monthly progress on the blog and report what‚Äôs been brewing up in the past months.</p> <p>Before diving into the latest news at Genics, I would like to introduce myself. I am <a href="/contributor/gouravkhunger">Gourav Khunger</a>, the founder of <a href="/">Genics Blog</a>. I am a teenager from India who is passionate about software development and <a href="/tag/open-source/">open source</a>.</p> <p>Let‚Äôs get started!</p> <h1 id="introduction">Introduction</h1> <p>Genics Blog went <a href="https://github.com/genicsblog">open-source</a> at this New Year, which means we started accepting community contributions for the blog.</p> <p>Within a month itself, we have reached huge milestones! Here‚Äôs a gist of some stats from the past month:</p> <ul> <li>The <strong>Core team</strong> members increased from <strong>1 to 5 members</strong>!</li> <li>A total of <strong>15 articles</strong> were posted in January!</li> <li>A total of <strong>40 members</strong> joined the <a href="https://discord.genicsblog.com">Genics Blog discord server</a>!</li> <li>Rose from <strong>200 monthly visitors to 500+</strong>!</li> </ul> <h1 id="how-it-all-started">How it all started</h1> <p>I always wanted to create a community of skilled developers who create quality content around topics!</p> <p>As the new year began, I grabbed the opportunity to open source my <a href="https://blog.gouravkhunger.xyz">existing blog</a> and build a community around the existing content.</p> <p>And since we chose the open source way, we quickly rose from 200 visitors/month to 500+ visitors/month!</p> <h1 id="open-source-setup">Open Source Setup</h1> <p>We use <a href="https://github.com">GitHub</a> for our open source projects. Everything we build around Genics is open source because we want to be as transparent as we can!</p> <p>For this blog, we used <a href="https://jekyllrb.com">Jekyll</a> to generate the website and render all the content. The beauty of Jekyll is we can use any design template, while writing the articles in markdown format. It renders the complete site with an easy build command!</p> <p><a href="https://pages.github.com">GitHub Pages</a> works really well for hosting the website, because jekyll generates static html pages which work seamlessly with GitHub Pages.</p> <p>There‚Äôs a lot more to share on how the site and management works. I‚Äôd love to write articles on how we build and operate our systems completely for <strong>FREE</strong>, so keep an eye out on the <a href="https://docs.genicsblog.com/developer">developer documentation</a> and future posts on Genics blog!</p> <h1 id="announcing-beyondwordsio-sponsorship">Announcing BeyondWords.io Sponsorship</h1> <p>Just a few days ago we got sponsored by <a href="https://beyondwords.io/?utm_source=genicsblog.com&amp;utm_medium=cpc&amp;utm_campaign=advertisement" rel="dofollow">BeyondWords.io</a>!</p> <blockquote> <p>BeyondWords is an AI voice and audio publishing platform that brings frictionless audio to writers, newsrooms, and businesses!</p> </blockquote> <p>It is a platform that allows anyone to publish their written scripts in audio format to the world. In my opinion, the best part about is its text to speech AI conversion modules are far better than those of Google and Amazon as the audio it generates seems to be near human voice!</p> <p><a href="/">Genics Blog</a> got sponsored by <a href="https://beyondwords.io">BeyondWords</a> where they generously offered us free services to convert our articles to audio formats! You can try out the audio functionality right at the top of this post!</p> <h1 id="stats">Stats</h1> <p>We have grown manifolds just because of the fact that we went open source!</p> <h2 id="open-source">Open Source</h2> <p>Here are the stats for the repositories under <a href="https:/github.com/genicsblog">Genics Blog</a> organization:</p> <ul> <li><a href="https://github.com/genicsblog/genicsblog.com"><code class="language-plaintext highlighter-rouge">genicsblog.com</code></a> (Main repo with posts and data files): <strong>21 stars</strong>, <strong>14 forks</strong></li> <li><a href="https://github.com/genicsblog/theme-files"><code class="language-plaintext highlighter-rouge">theme-files</code></a> (Basically template files): <strong>2 stars</strong>, <strong>1 fork</strong></li> <li><a href="https://github.com/genicsblog/docs"><code class="language-plaintext highlighter-rouge">docs</code></a> (<a href="https://docs.genicsblog.com">Documentation website</a>): <strong>3 stars</strong>, <strong>2 forks</strong></li> <li><a href="https://github.com/genicsblog/genics-bot"><code class="language-plaintext highlighter-rouge">genics-bot</code></a> (Bot for the <a href="https://discord.genicsblog.com">Discord server</a>): <strong>5 star</strong>, <strong>1 fork</strong></li> </ul> <h2 id="google-analytics">Google Analytics</h2> <p>Images speak louder than words!</p> <p><img src="https://user-images.githubusercontent.com/46792249/153484864-a8bf7f54-03aa-4f30-95d8-7f94e2e94949.png" alt="Genics blog's past 30 days Google Analytics Stats"/></p> <h2 id="organic-stats">Organic Stats</h2> <p><img src="https://user-images.githubusercontent.com/46792249/153484772-c2a0a786-0826-4771-85a8-c70f55dcb719.png" alt="Genics blog's past 30 days Google Search Console Stats"/></p> <h1 id="future-plans">Future Plans</h1> <p>We are looking forward to producing a lot of quality content in the future, as well as working on improving the platform.</p> <p>Here are a few examples of some things we‚Äôd work on in the near future:</p> <ul> <li>Building certain tools to aid the writing process for authors at Genics Blog.</li> <li>Adding table of content to the posts.</li> <li>Social previews for anchor tags in posts.</li> <li>Copy buttons for code blocks.</li> <li>Adding some cool webmention functionality to our articles, so as to highlight who shares our articles.</li> </ul> <p>And a lot more!</p> <p>You can check out the issues page on <a href="https://github.com/genicsblog/theme-files/issues"><code class="language-plaintext highlighter-rouge">theme-files</code></a> repo to see what‚Äôs on the roadmap.</p> <h1 id="final-words">Final Words</h1> <p>I‚Äôm really glad to be sharing this info with you!</p> <p>Did you know we have a discord bot that sends notifications on our analytics and stats everyday üëÄ. I bet you, hardly anyone would do that :P</p> <p><img src="https://user-images.githubusercontent.com/46792249/153487310-2dcd5854-4de9-47fa-a679-09a917d8564f.png" alt="Genics Blog's Discord Community Bot logging stats from Google Analytics everyday"/></p> <p>Do join us there to get notified of new posts and updates on Genics Blog.</p> <p>If you find what we are doing as high school students fascinating, consider joining us and be a part of Genics Blog! <a href="/contribute">Here</a> are the ways you could contribute to it.</p> <p>Looking forward to seeing you engage with the active community on our <a href="https://discord.genicsblog.com">Discord server</a> :)</p>]]></content><author><name>gouravkhunger</name></author><category term="genics-log"/><summary type="html"><![CDATA[Here's the issue #1 in the Genics log series containing all the latest news and updates on our blog's past month of January!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/153496992-8f711280-7740-4153-b825-0b1ba556bf6c.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/153496992-8f711280-7740-4153-b825-0b1ba556bf6c.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How I prefer to structure my Next.js projects</title><link href="https://genicsblog.com/anurag/how-i-prefer-to-structure-my-next-js-projects" rel="alternate" type="text/html" title="How I prefer to structure my Next.js projects"/><published>2022-02-07T00:00:00+00:00</published><updated>2022-02-07T00:00:00+00:00</updated><id>https://genicsblog.com/anurag/how-i-prefer-to-structure-my-nextjs-projects</id><content type="html" xml:base="https://genicsblog.com/anurag/how-i-prefer-to-structure-my-next-js-projects"><![CDATA[<p>Hello folks! Today I‚Äôm going to explain how I structure my Next.js projects.</p> <p><img src="https://c.tenor.com/-z2KfO5zAckAAAAC/hello-there-baby-yoda.gif" alt=""/></p> <blockquote> <p><strong>Note</strong>: There is no right or wrong way to structure a Next.js project, and this is highly opinionated.</p> </blockquote> <p>So, the structure of a Next.js project depends mainly on the complexity of a project.</p> <p>If a project needs only page and is small in terms of complexity, you should not over-structure it. With that being said, let‚Äôs see how to manage your project depending upon the complexity.</p> <h3 id="-single-pages">üìÉ Single Pages</h3> <p>Next.js automatically routes every file in the <code class="language-plaintext highlighter-rouge">pages/</code> directory to a name associated with the file name.</p> <p>For example, the React component inside the <code class="language-plaintext highlighter-rouge">pages/dashboard.jsx</code> will be routed to <code class="language-plaintext highlighter-rouge">${URL}/dashboard</code></p> <p>For single pages, you can just create a single file that will export a React component:</p> <p><code class="language-plaintext highlighter-rouge">pages/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Hello world<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Home</span><span class="p">;</span>
</code></pre></div></div> <h3 id="-breaking-down-into-smaller-components">üß© Breaking down into smaller components</h3> <p>Now, at some point, your file will have a lot of lines, so you can make smaller standalone components:</p> <p><code class="language-plaintext highlighter-rouge">pages/dashboard.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span><span class="si">{</span><span class="cm">/* component code */</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">Hero</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span><span class="si">{</span><span class="cm">/* component code */</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nx">Dashboard</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">Header</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Hero</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Dashboard</span><span class="p">;</span>
</code></pre></div></div> <h3 id="-creating-custom-files-for-components">üìÅ Creating custom files for components</h3> <p>The above example works if you have smaller components. But it is advisable to create standalone files for components.</p> <p>Conventionally, components should be stored in the <code class="language-plaintext highlighter-rouge">components</code> directory at the root directory of the app:</p> <p><code class="language-plaintext highlighter-rouge">components/Header.jsx</code>:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="cm">/* some code */</span><span class="si">}</span>
      <span class="si">{</span><span class="cm">/* some more code */</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>
</code></pre></div></div> <p>Then, in the desired file, you can import and use it.</p> <p><code class="language-plaintext highlighter-rouge">pages/index.js</code>:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Header</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/header.jsx</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">Header</span> <span class="p">/&gt;</span>
      <span class="si">{</span><span class="cm">/* main component */</span><span class="si">}</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Home</span><span class="p">;</span>
</code></pre></div></div> <p>But as your app grows, it will contain more and more components, and while importing them, the code can be a little messy.</p> <p>Here‚Äôs a simple workaround for this!</p> <p>First, make a file inside the <code class="language-plaintext highlighter-rouge">components</code> directory named <code class="language-plaintext highlighter-rouge">index.js</code> or <code class="language-plaintext highlighter-rouge">index.jsx</code></p> <p>Then, inside the file, export all the components at once.</p> <p><code class="language-plaintext highlighter-rouge">components/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Header.jsx</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Hero.jsx</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Footer</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Next, you can import all the components inside your desired file at once:</p> <p><code class="language-plaintext highlighter-rouge">pages/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Header</span><span class="p">,</span> <span class="nx">Hero</span><span class="p">,</span> <span class="nx">Footer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nc">Header</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Hero</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Footer</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="-making-categories-for-similar-components">üóÉ Making categories for similar components</h3> <p>Now, let‚Äôs say you have components of similar kinds. Like the <code class="language-plaintext highlighter-rouge">Header</code> and the <code class="language-plaintext highlighter-rouge">Footer</code> component are navigation components. Similarly, you have different <code class="language-plaintext highlighter-rouge">Card</code> components that can be sorted into the Cards category.</p> <p>For this, you can create different folders inside the <code class="language-plaintext highlighter-rouge">components</code> directory as this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- components
    | - Navigation
        | - Header.component.jsx
        | - Footer.component.jsx
    | - Cards
        | - Confirm.card.jsx
        | - Checkout.card.jsx
</code></pre></div></div> <h3 id="-making-categories-for-similar-pages">üìñ Making categories for similar pages</h3> <p>Back to pages, in some cases, pages can also fall into some categories. For example, the <code class="language-plaintext highlighter-rouge">sign-up</code> and <code class="language-plaintext highlighter-rouge">login</code> page falls into the auth category.</p> <p>So, for that case, you can make a directory inside the <code class="language-plaintext highlighter-rouge">pages</code> directory named <code class="language-plaintext highlighter-rouge">auth</code> containing the <code class="language-plaintext highlighter-rouge">sign-up</code> and <code class="language-plaintext highlighter-rouge">login</code> pages.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- pages
    | - auth
        | - sign-up.jsx
        | - login.jsx
</code></pre></div></div> <h3 id="-storing-files-fonts">üóÑ Storing Files, Fonts</h3> <p>Moving from this, the conventional way to store external files such as Images, Fonts, etc. is to store them in the public directory.</p> <p>For example, you can store all the required images in the <code class="language-plaintext highlighter-rouge">public/assets</code> directory and the required fonts in the <code class="language-plaintext highlighter-rouge">public/fonts</code> directory:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- public
    | - assests
        | - cover.png
        | - logo.png
    | - fonts
        | - poppins-medium.woff2
        | - sen-regular.woff2
</code></pre></div></div> <h3 id="-managing-custom-hooks-types-functions">üîÆ Managing custom hooks, types, functions</h3> <p>In addition to this, you can create separate folders for custom hooks, types, functions, etc.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- hooks
    | - useuser.jsx
- @types
    | - propTypes.ts
- utils
    | - uploadImage.js
</code></pre></div></div> <p>That‚Äôs a wrap for this article. If you liked this, make sure to drop some comments on this article!</p> <h3 id="about-the-author">About the Author</h3> <ul> <li><a href="https://anurag.tech">Portfolio</a></li> <li><a href="https://blog.anurag.tech">Blog</a></li> </ul>]]></content><author><name>anurag</name></author><category term="web"/><category term="next-js"/><category term="web-development"/><category term="tips"/><summary type="html"><![CDATA[A look into how Anurag prefers to maintain and scale his projects built with Next.js + some tips!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/ddum5vpp3/image/upload/v1644217454/Frame_2_rbhlxk.png"/><media:content medium="image" url="https://res.cloudinary.com/ddum5vpp3/image/upload/v1644217454/Frame_2_rbhlxk.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">10 SEO tools you need for your projects in 2022</title><link href="https://genicsblog.com/10-seo-tools-you-need-to-use-in-2022" rel="alternate" type="text/html" title="10 SEO tools you need for your projects in 2022"/><published>2022-02-02T00:00:00+00:00</published><updated>2022-02-02T00:00:00+00:00</updated><id>https://genicsblog.com/10-seo-tools-you-need-to-use-in-2022</id><content type="html" xml:base="https://genicsblog.com/10-seo-tools-you-need-to-use-in-2022"><![CDATA[<p>SEO tools are essential for growing organic traffic, maintaining and improving rankings, and delivering the proper target keywords. There are numerous SEO tools accessible today, both paid and free.</p> <p>Choosing the best SEO tool for your business or industry can be difficult and time-consuming at times.</p> <p>We‚Äôve hand-picked the top <a href="/ten-best-seo-tools-for-2022">10 SEO tools</a> after extensive study. Also, we have some <strong>bonus content</strong> for you at the end. Let‚Äôs get this party started right away!</p> <h2 id="1-seoquake">1. <a href="https://www.seoquake.com/">SEOQuake</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152030058-fa0b3a7c-f550-4da8-871a-95a678f43b10.png" alt="SEOQuake Website screenshot"/></p> <p>SEOQuake is a free but a practical SEO analysis tool used by many. It‚Äôs on the list of one of the best SEO Tools which are completely <strong>FREE</strong>.</p> <p>With the help of this tool, you can quickly start tracking and analyzing site audits and compare them with that of your competitors.</p> <p>Suppose you‚Äôre working on your content and want accurate suggestions to get a better ranking. SEOQuake would be the best choice for you.</p> <p>You‚Äôll get a complete in-depth report of your competitors so that you can Analyze and see what improvements you need to implement in your website.</p> <h2 id="2-semrush">2. <a href="https://www.semrush.com">SEMrush</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028779-76725570-c113-499c-b64f-0594efac6657.png" alt="SEMrush website screenshot"/></p> <p>Most people utilise SEMrush, which is a really popular SEO tool. It is well-known for its ability to perform. SEMrush comes with a plethora of resources that are included in their SEO toolbox.</p> <p>These resources are extremely useful for analysis and tracking websites on the inside, such as which keywords your competitors are ranking for, what pages they are, and what the monthly volume of particular phrase gets the most hits for them.</p> <p>When you know this inside out as a blogger or website owner, you can make a lot of adjustments to your website and witness a significant improvement in its performance.</p> <p>As a result, having these kinds of SEO tools is essential for a higher ranking. SEMrush can assist you in improving the rank of your website.</p> <h2 id="3-ahrefs">3. <a href="https://ahrefs.com">Ahrefs</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028671-6073bf04-86e2-4c4b-92d5-390bdcbd0464.png" alt="Ahrefs website screenshot"/></p> <p>Ahrefs is a popular SEO tool. It assists you in a variety of ways, including allowing you to make the best content decisions, thoroughly reviewing your website, offering target keywords, and much more.</p> <p>It can be used as a site explorer, a content explorer, a keyword explorer, and a rank tracker among other things.</p> <p>The Site Explorer, a primary features of the Ahrefs, displays the performance of web pages along with the highly regarded web pages for specific keywords and subjects.</p> <p>With its keyword explorer tool, you can rapidly look at the volume of a given keyword, such as how many hits it gets per month or how many searches it gets per month.</p> <p>It is widely used by digital marketers. It mostly works for backlinks and performs remarkable SEO analysis. Keep in mind that <strong>it is a paid tool</strong>.</p> <h2 id="4-moz-pro">4. <a href="https://moz.com">Moz Pro</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028572-24be2fea-9021-452e-b73d-9bf19b350136.png" alt="Moz Pro website screenshot"/></p> <p>It‚Äôs an all-in-one SEO optimization tool that includes plethora of useful resources that primarily assist you in obtaining all of the information about your competitors‚Äô rankings.</p> <p>You may optimise your website from its suggestions and make it more valuable for ranking with the help of this tool.</p> <p>When you start using this tool, you‚Äôll be able to get a full report on your competition, which I believe is the greatest approach to figure out what‚Äôs working and what‚Äôs not, so you can optimise your website and attain a higher Google ranking.</p> <h2 id="5-answerthepublic">5. <a href="https://answerthepublic.com">AnswerThePublic</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028620-be6ce039-6c4d-4da6-b573-12c1303f1393.png" alt="AnswerThePublic website screenshot"/></p> <p>This tool is mostly used for keyword research and analysis. Assume you‚Äôre seeking for a program that focuses largely on keywords so you can evaluate the websites of your competitors.</p> <p>You‚Äôll get amazing insights into other websites that are doing great, as well as helpful suggestions for your own website, such as what you should do to improve your ranking.</p> <p>Many users report increased traffic and conversions after employing these solutions!</p> <h2 id="6-keyword-hero">6. <a href="https://keyword-hero.com">Keyword Hero</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152031859-47802489-53c0-4d17-896e-56d35ce73445.png" alt="Keyword Hero website screenshot"/></p> <p>Most of the times we write articles without doing proper keyword research. We do not optimize our posts to target specific keywords which we want the article to rank for.</p> <p>Have you considered which specific keyword your visitors search on Google before clicking on your website? If you know those keywords, I‚Äôm sure you‚Äôll focus primarily on maintaining rankings for those!</p> <p>And for both the above reasons, Keyword-Hero is great because it lets us do comprehensive keyword research and it also assists you in a variety of methods!</p> <h2 id="7-spyfu">7. <a href="https://www.spyfu.com">SpyFu</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028250-c34c8ad7-4963-419f-9329-03c3a516cf0b.png" alt="SpyFu website screenshot"/></p> <p>It‚Äôs a fantastic tool for analysing competitors!</p> <p>Spyfu is a reliable tool for spying on your competitor‚Äôs website keywords if you want to track each step, get detailed insights for ranking, and see what your competitors are up to.</p> <h2 id="8-seomater">8. <a href="https://seomator.com">SeoMater</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152027816-ecf8895e-53f8-462b-9308-b9454447c3bc.png" alt="SeoMater website screenshot"/></p> <p>It‚Äôs a one-of-a-kind SEO tool that includes SEO auditing and a website crawling tool!</p> <p>With this tool, you may perform on-page optimization based on the analysis of your competitors.</p> <p>It‚Äôs a really professional application that keeps you up to date with reports and essential suggestions that you should review and implement in your websites for higher Google rankings!</p> <h2 id="9-contentking">9. <a href="https://www.contentkingapp.com">ContentKing</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152028141-485e84df-72a9-4fac-8d62-d07a39d95702.png" alt="ContentKing website screenshot"/></p> <p>Here‚Äôs a tracking tool that meets all of your needs. If you‚Äôre searching for a bundle tool that has all the capabilities you need, I recommend ContentKing because it offers practically everything you need.</p> <p>It‚Äôs a tool that works 24 hours a day, 7 days a week to provide you with complete in-depth details on your competitors‚Äô websites.</p> <p>Because you‚Äôll get an accurate audit of your competitors‚Äô websites when you use Content King, you could implement the strategies that work for them that‚Äôll get you a higher chance of gaining a better rating.</p> <h2 id="10-woorank">10. <a href="https://woorank.com">Woorank</a></h2> <p><img src="https://user-images.githubusercontent.com/46792249/152027898-65995c73-be0b-4140-8431-5c921ac22bce.png" alt="Woorank website screenshot"/></p> <p>According to the reports, this is one of the best SEO analysis tools. This tool has a wide range of applications due to the fact that both the free and paid plans perform admirably. I recommend that you start with its free plan and then upgrade if you‚Äôre happy with it.</p> <p>You may track and analyse your competitors‚Äô websites using Woorank. This tool provides you with comprehensive reports.</p> <p>You can see which keywords your competitors rank higher for and how you may improve your own rankings. This tool will tell you where you‚Äôre falling short and what improvements you may make to improve your rankings.</p> <h2 id="bonus-tools">Bonus Tools</h2> <p>Here‚Äôs another list of 4 other <a href="/must-have-free-seo-tools-for-everyone">Must-Have Free SEO Tools For Everyone</a> that will help you with SEO analysis and growing in rankings!</p> <h2 id="thank-you-for-reading">Thank you for reading</h2> <p>If you liked this post, subscribe to my <a href="https://abhirajbhowmick.substack.com" rel="dofollow">newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my articles</a>, product launches, and tech news. Follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources.</p>]]></content><author><name>abhiraj</name></author><category term="seo"/><category term="beginners"/><category term="tools"/><summary type="html"><![CDATA[An amazing list of 10 Best SEO tools that will help you gain Organic traffic, increase Domain Authority and do Keyword research in 2022!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/152024220-417ecb24-2d82-41e5-bb93-fff77b575b3c.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/152024220-417ecb24-2d82-41e5-bb93-fff77b575b3c.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Next generation Hello World program</title><link href="https://genicsblog.com/next-generation-hello-world-program" rel="alternate" type="text/html" title="Next generation Hello World program"/><published>2022-01-31T00:00:00+00:00</published><updated>2022-01-31T00:00:00+00:00</updated><id>https://genicsblog.com/next-generation-hello-world-program</id><content type="html" xml:base="https://genicsblog.com/next-generation-hello-world-program"><![CDATA[<p>Hey developers! Are you all bored of the pretty common <strong>Hello World!</strong> program you get to see in each programming tutorial?</p> <p>Well, <a href="#conclusion">we</a> have come up with a unique <strong>Next-gen Hello World program challenge</strong> that would surely flex your coding muscles and help you learn advanced concepts in your favourite programming language in a fun and interesting way!</p> <h1 id="the-challenge">The Challenge</h1> <p>The challenge is pretty simple :wink:, here‚Äôs what you have to do:</p> <blockquote> <p>Write a program that keeps on printing <strong>Hello World</strong> to the console in a loop, but after a time delay that is mentioned by the user.<br/><br/></p> <p>The delay between each console output should be <strong>1 second</strong>.<br/><br/></p> <p>At the time of execution of the code, the user may enter the letter ‚Äú<strong>s</strong>‚Äù (without quotes) on the console to stop the process.</p> </blockquote> <p>Here‚Äôs basically what you have to do:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>&lt;Command to run your code&gt;
Please enter the delay duration <span class="k">in </span>Seconds: 5 &lt;- user wants 5 second delay between each output
Type <span class="s1">'s'</span> without the quotes to stop the program.
5
4
3
2
1
Hello World!
5
4
3
s &lt;- User inputs <span class="s2">"s"</span> to stop the program
<span class="nv">$ </span>&lt;Back to terminal&gt;
</code></pre></div></div> <p><em>Seems pretty easy, right?</em> :eyes:</p> <p><strong>WAIT BEFORE MOVING AHEAD!</strong> At this point, I‚Äôd like you to think over the problem and share what you come up with in the comments section below!</p> <p>You could use any language of your choice! Here, in this article, I‚Äôll explain how to implement the above logic in Java.</p> <h2 id="why-java">Why Java?</h2> <blockquote> <p>Spoiler alert! Reading any further would reveal the concepts needed to solve this problem!</p> </blockquote> <p>We‚Äôll use Java for this problem because it supports <strong>Multi-Threading</strong> out of the box. This means that we can run multiple blocks of codes at the same time, using different cores of the CPU. Any language with this capability can easily solve this problem.</p> <h2 id="general-solution">General Solution</h2> <p>Here‚Äôs the thought process needed to solve this problem: We would run two threads, one for handling the console outputs and the other for user inputs. The user input thread would be responsible for checking if the user has entered ‚Äú<strong>s</strong>‚Äù on the console. If yes, the output thread would be terminated.</p> <p>We will use a <code class="language-plaintext highlighter-rouge">flag</code> boolean variable (initially set to <code class="language-plaintext highlighter-rouge">true</code>) that would be set to <code class="language-plaintext highlighter-rouge">false</code> when the user enters ‚Äú<strong>s</strong>‚Äù on the console. The output thread would terminate once the flag is set to <code class="language-plaintext highlighter-rouge">false</code>.</p> <h2 id="java-solution">Java Solution</h2> <p>Let‚Äôs dig into the coding part!</p> <h3 id="creating-and-initializing-required-variables">Creating and initializing required variables</h3> <p>Here‚Äôs the blueprint of the code we‚Äôll start with:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span> <span class="c1">// all the classes we need to use are imported here</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NextGenHelloWorld</span> <span class="o">{</span>

    <span class="c1">// variables</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">time</span><span class="o">;</span> <span class="c1">// stores the time delay for "Hello World!" to appear on console</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"nothing"</span><span class="o">;</span> <span class="c1">// stores what is entered by the user to the console</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Thread</span> <span class="n">outputThread</span><span class="o">,</span> <span class="n">inputThread</span><span class="o">;</span> <span class="c1">// threads for output and input</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Scanner</span> <span class="n">scanner</span><span class="o">;</span> <span class="c1">// Scanner object handles console inputs</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// checks if threads should be stopped or should continue</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">// code goes here</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div> <p>These variables will help us to keep track of the state of the program:</p> <ul> <li><code class="language-plaintext highlighter-rouge">time</code> : This variable stores the time delay entered by the user for <strong>Hello World!</strong> to appear on the console.</li> <li><code class="language-plaintext highlighter-rouge">input</code> : This variable stores the input by the user to the console. Later, it would be used to check if what the user has entered is the letter ‚Äú<strong>s</strong>‚Äù.</li> <li><code class="language-plaintext highlighter-rouge">outputThread</code> and <code class="language-plaintext highlighter-rouge">inputThread</code> : These variables store the thread instances for the output and input threads respectively.</li> <li><code class="language-plaintext highlighter-rouge">scanner</code> : This variable stores the <code class="language-plaintext highlighter-rouge">Scanner</code> object that handles console inputs.</li> <li><code class="language-plaintext highlighter-rouge">flag</code> : This variable is a boolean variable that is set to <code class="language-plaintext highlighter-rouge">true</code> initially. It is set to <code class="language-plaintext highlighter-rouge">false</code> when the user enters ‚Äú<strong>s</strong>‚Äù on the console.</li> </ul> <h3 id="init-block"><code class="language-plaintext highlighter-rouge">init()</code> block</h3> <p>We will make an <code class="language-plaintext highlighter-rouge">init()</code> function inside the class to initialize the undeclared variables.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

    <span class="c1">// until a valid integer value is provided for the time</span>
    <span class="c1">// keep asking for it</span>
    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Please enter the delay duration in Seconds: "</span><span class="o">);</span>
            <span class="n">time</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">time</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">InputMismatchException</span><span class="o">();</span> <span class="c1">// we don't want negative integers</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InputMismatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not a valid positive integer, try again"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// general info</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Type 's' without the quotes to stop the program."</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div> <p>Here, we initialize the <code class="language-plaintext highlighter-rouge">scanner</code> variable and create a loop to ask for user input.</p> <p>The loop will keep asking for the input until the user enters a valid integer value for the <code class="language-plaintext highlighter-rouge">time</code> delay. The code for asking for user input is wrapped inside a <code class="language-plaintext highlighter-rouge">try</code>-<code class="language-plaintext highlighter-rouge">catch</code> block, to handle the case where the user enters an invalid input.</p> <p>When a valid input is received, we <code class="language-plaintext highlighter-rouge">break</code> the loop and print some general information for the user on how to close the program.</p> <p>Don‚Äôt forget to call the <code class="language-plaintext highlighter-rouge">init()</code> function inside the <code class="language-plaintext highlighter-rouge">main()</code> function!</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

    <span class="c1">// initialise stuff</span>
    <span class="n">init</span><span class="o">();</span>

    <span class="c1">// other things should start after init()</span>

<span class="o">}</span>
</code></pre></div></div> <h3 id="creating-threads">Creating threads</h3> <h4 id="the-sleep-function">The sleep function</h4> <p>Before creating the threads, we need to create a function that would simulate 1 second delay. We will use this function to add 1 second delays whenever we need to.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span> <span class="c1">// 1000 millisecond = 1 second</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Here, we call the <code class="language-plaintext highlighter-rouge">sleep()</code> function of the thread class to add a 1 second delay. Let‚Äôs move ahead to the threads!</p> <h4 id="output-thread">Output Thread</h4> <p>As discussed earlier, the output thread will keep logging <strong>Hello World!</strong> along with a count-down timer that starts with what the user has entered for the <code class="language-plaintext highlighter-rouge">time</code> delay.</p> <p>Let‚Äôs code this thread! Threads in java require <code class="language-plaintext highlighter-rouge">Runnable</code> objects to be created, inside which we override the <code class="language-plaintext highlighter-rouge">run()</code> method and define what needs to be executed inside the thread.</p> <p>Here‚Äôs the code for the output thread:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">outputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="c1">// continue printing if not stopped</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, break loop</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                    <span class="n">sleep</span><span class="o">();</span> <span class="c1">// 1 second delay</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, leave prining</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">);</span>
                <span class="n">sleep</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">);</span>
</code></pre></div></div> <p>Here, we run a while loop that keeps a check on the <code class="language-plaintext highlighter-rouge">flag</code> variable. Unless it is <code class="language-plaintext highlighter-rouge">false</code>, it keeps printing the count-down and the <strong>Hello World!</strong> message using a <code class="language-plaintext highlighter-rouge">for</code> loop.</p> <p>Notice how we put <code class="language-plaintext highlighter-rouge">if (!flag) break;</code> at 2 places. This is because we want the loop to break as soon as <code class="language-plaintext highlighter-rouge">flag</code> becomes <code class="language-plaintext highlighter-rouge">false</code>.</p> <p>That‚Äôs it for the output thread!</p> <h4 id="input-thread">Input Thread</h4> <p>The input thread would follow the same logic as the output thread. It would keep on listening for user inputs and store it inside the <code class="language-plaintext highlighter-rouge">input</code> variable. Once the <code class="language-plaintext highlighter-rouge">input</code> matches ‚Äú<strong>s</strong>‚Äù, the variable <code class="language-plaintext highlighter-rouge">flag</code> would become <code class="language-plaintext highlighter-rouge">false</code> and the output thread would terminate because of this!</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">inputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="c1">// while not stopped, continue to listen for inputs</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">input</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

                <span class="c1">// if "s" found, break the loop</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"s"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">);</span>
</code></pre></div></div> <p>We use the <code class="language-plaintext highlighter-rouge">toLowerCase()</code> method to convert the <code class="language-plaintext highlighter-rouge">input</code> to lower case so as to avoid case sensitivity issues.</p> <p>Try to run the program and see what happens! To your surprise, it won‚Äôt do anything after asking input for the <code class="language-plaintext highlighter-rouge">time</code> delay.</p> <p>That happens because we didn‚Äôt call the <code class="language-plaintext highlighter-rouge">start()</code> function on the threads! It‚Äôs important to start the threads otherwise they won‚Äôt run after initialization.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// start the threads</span>
<span class="n">inputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="n">outputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div> <h2 id="final-code">Final Code</h2> <p>By now, the final <code class="language-plaintext highlighter-rouge">NextGenHelloWorld.java</code> file should look like this:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NextGenHelloWorld</span> <span class="o">{</span>
    <span class="c1">// variables</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">time</span><span class="o">;</span> <span class="c1">// time to be taken to print Hello World</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"nothing"</span><span class="o">;</span> <span class="c1">// checks what is entered</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Thread</span> <span class="n">outputThread</span><span class="o">,</span> <span class="n">inputThread</span><span class="o">;</span> <span class="c1">// threads for output and input</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Scanner</span> <span class="n">scanner</span><span class="o">;</span> <span class="c1">// gets inputs</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// checks if threads should be stopped or continued to run</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// initialise variables and input timer seconds</span>
        <span class="n">init</span><span class="o">();</span>

        <span class="c1">// output thread handles console outputs</span>
        <span class="n">outputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
            <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>

                    <span class="c1">// continue printing if not stopped</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">time</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, break loop</span>
                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                            <span class="n">sleep</span><span class="o">();</span> <span class="c1">// 1 second delay</span>
                        <span class="o">}</span>

                        <span class="k">if</span> <span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span> <span class="c1">// if stopped, leave prining</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">);</span>
                        <span class="n">sleep</span><span class="o">();</span>
                    <span class="o">}</span>

                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">);</span>

        <span class="c1">// input thread handles whether to stop the program or not</span>
        <span class="n">inputThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span>
            <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
                    <span class="c1">// while not stopped, continue to listen for inputs</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">input</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>

                        <span class="c1">// if "s" found, break the loop</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"s"</span><span class="o">))</span> <span class="o">{</span>
                            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                            <span class="k">break</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">);</span>

        <span class="c1">// start the threads</span>
        <span class="n">inputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">outputThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// simulates 1 second delay</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// initialise stuff</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

        <span class="c1">// until a valid integer value is provided for the time</span>
        <span class="c1">// keep asking for it</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Please Enter the delay duration in Seconds: "</span><span class="o">);</span>
                <span class="n">time</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">time</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">InputMismatchException</span><span class="o">();</span> <span class="c1">// we don't want negative integers</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InputMismatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not a valid positive integer, try again"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// general info</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Type 's' without the quotes to stop the program."</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>It‚Äôs pretty long but I‚Äôm sure you understand most of it!</p> <p>You can find all the code for this tutorial in <a href="https://github.com/Kushagra-Jain99/NextGenHelloWorld">this repository</a>.</p> <h2 id="conclusion">Conclusion</h2> <p>In this article, we got to learn how to use the <strong>Multi-Threading</strong> approach to solve this unique <strong>Next-gen Hello World program Challenge</strong>.</p> <p>I would like to thank <a href="/contributor/kushagra">Kushagra</a> for providing the idea for the problem. He came up with it some months ago and we spent time solving it together. I find this concept very intuitive and enjoyed writing this article.</p> <p>I hope you find this article useful. I would love to hear your feedback and suggestions on how to improve this tutorial in the comments section below!</p> <p>And yes, don‚Äôt forget to share the code for the implementation of the logic, in your favourite programming language :)</p>]]></content><author><name>gouravkhunger</name></author><category term="coding"/><category term="advanced"/><category term="tips"/><summary type="html"><![CDATA[Done writing simple Hello World code? Give yourself a challenge by building this Next-gen Hello World program!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151851304-f4c3746f-7c60-4cf9-84b6-cf551e627ada.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151851304-f4c3746f-7c60-4cf9-84b6-cf551e627ada.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">5 projects you can make to become a better web developer</title><link href="https://genicsblog.com/five-projects-to-become-better-at-webdev" rel="alternate" type="text/html" title="5 projects you can make to become a better web developer"/><published>2022-01-26T00:00:00+00:00</published><updated>2022-01-26T00:00:00+00:00</updated><id>https://genicsblog.com/five-projects-to-become-better-at-webdev</id><content type="html" xml:base="https://genicsblog.com/five-projects-to-become-better-at-webdev"><![CDATA[<p>The demand for web developers is growing as web development becomes more popular in the market. Web development has evolved as a viable field, attracting students and professionals from a wide range of academic and professional backgrounds.</p> <p>Working on web development projects is the ideal approach to gain experience in this sector if you‚Äôre also interested in it. Your skills will improve the more you practise and experiment with web development projects.</p> <h2 id="1-simple-clock">1. Simple Clock</h2> <p>It‚Äôs a simple app that you can develop using HTML and CSS. In this project, you have to build a simple webpage and then update the time.</p> <p>To make it more attractive, you can add start, stop features. Also, you can add an alarm function, ringtone function for alarms, Etc.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/MWOWyNJ?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="2-weathernews-app">2. Weather/News App</h2> <p>Making a weather/news app will test your skills, and in this project, you can use two APIs:</p> <ul> <li>One to get the user‚Äôs location.</li> <li>Another to fetch weather data based on the user‚Äôs location.</li> </ul> <p>As a beginner, having this project in your resume will help you stand apart from the crowd.</p> <h2 id="3-to-do-list">3. To-do list</h2> <p>It‚Äôs one of the best and simple projects that you can develop using HTML, CSS and JS. This project will help you to store your personal to-do lists and it will be saved in your local storage, which can be accessed anytime.</p> <p>Moreover, even if you host the app, the data will be stored in the user‚Äôs computer‚Äôs local storage which will maintain privacy.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/mdqdPvv?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="4-forms">4. Forms</h2> <p>HTML, CSS, and JavaScript can all be used to make forms. You can create a gorgeous landing page design with a little effort and attention. You can begin with a modest project, such as designing a survey form or a consultation form, depending on the type of business you‚Äôre starting.</p> <p>Name, address, e-mail, date of birth, phone number, and other pertinent information can be included in the form. You can send the form to your friends and see what they have to say!</p> <p>Companies nowadays use survey forms to gather information from their target audiences. In addition, having a landing page project on your resume will be a bonus!</p> <h2 id="5-coinflip">5. Coinflip</h2> <p>This is the most unexpected item on the list but it can teach concepts that can be very helpful in the long run. You can learn about using the <code class="language-plaintext highlighter-rouge">Math.random()</code> method to simulate a random result from an array of options.</p> <div class="mb-6 aspect-video"> <iframe class="w-full h-full rounded-xl" scrolling="no" src="https://codepen.io/rainboestrykr/embed/preview/ExbxyvR?default-tab=html%2Cresult&amp;theme-id=dark" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true"> </iframe> </div> <h2 id="conclusion">Conclusion</h2> <p>These were the top 5 web development projects. All of the projects listed are beginner-friendly, and working on them will help you improve your web development abilities and enhance your career.</p> <h3 id="thank-you-for-reading">Thank you for reading</h3> <p>If you liked this post, you can subscribe to my <a href="https://abhirajbhowmick.substack.com/" rel="dofollow">newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my blogs</a>, product launches, and tech news. Follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources.</p>]]></content><author><name>abhiraj</name></author><category term="web"/><category term="web-development"/><category term="tips"/><category term="beginners"/><summary type="html"><![CDATA[If you are interested in web development, the best way to create experience in this field is to work on web development projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151173908-5358883e-7e44-41d3-bc5c-c7cea7086795.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151173908-5358883e-7e44-41d3-bc5c-c7cea7086795.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Intro to GraphQL with Node.js and TypeScript</title><link href="https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript" rel="alternate" type="text/html" title="Intro to GraphQL with Node.js and TypeScript"/><published>2022-01-26T00:00:00+00:00</published><updated>2022-01-26T00:00:00+00:00</updated><id>https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript</id><content type="html" xml:base="https://genicsblog.com/dhruva/intro-to-graphql-with-node-and-typescript"><![CDATA[<p>In this post, I‚Äôll help you get a solid understanding of working with GraphQL in Node.js and TypeScript using a library called <a href="https://typegraphql.com">TypeGraphQL</a>.</p> <p>TypeGraphQL is an awesome way to create your GraphQL resolvers and it has seamless integration capabilities with ORMs like <code class="language-plaintext highlighter-rouge">TypeORM</code> (we‚Äôll be using it in this post!) and mikro-orm. It uses classes and decorators to beautifully generate our schemas using very less code.</p> <p>Also stick around till the end to find some challenges to reinforce your skills!</p> <h1 id="what-were-gonna-do">What we‚Äôre gonna do</h1> <ul> <li>First, we‚Äôll setup a basic TypeScript project</li> <li>Then, we‚Äôll configure <strong>TypeORM</strong>, to interact with our database</li> <li>We‚Äôll create a <code class="language-plaintext highlighter-rouge">Task</code> database entity and hook it up with TypeORM</li> <li>After that, we‚Äôll set up a basic Apollo/Express web server</li> <li>And finally, we‚Äôll create our own GraphQL resolver using TypeGraphQL with CRUD (create, read, update, delete) functionality</li> </ul> <p>Alright, let‚Äôs get started!</p> <h1 id="setting-up-a-typescript-project">Setting up a TypeScript project</h1> <p>First let‚Äôs create an empty directory called <code class="language-plaintext highlighter-rouge">graphql-crud</code>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>graphql-crud
</code></pre></div></div> <p>And you can open this directory with the editor of your choice (I‚Äôll be using Visual Studio Code).</p> <p>Now let‚Äôs initialize this as an NPM project using</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init <span class="nt">-y</span>
</code></pre></div></div> <p>This creates a basic <code class="language-plaintext highlighter-rouge">package.json</code>.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Alright cool!</p> <p>So now since we have an NPM project set up, we can install TypeScript and the type definitions for Node:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add typescript
</code></pre></div></div> <p>and</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/node
</code></pre></div></div> <p><strong>Note:</strong> I‚Äôll be using Yarn throughout this post, feel free to use NPM.</p> <p>Also we need to make a <code class="language-plaintext highlighter-rouge">tsconfig.json</code> file to configure the TypeScript compiler, so to do that we‚Äôll use a library called <code class="language-plaintext highlighter-rouge">tsconfig.json</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx tsconfig.json
</code></pre></div></div> <p>Select <code class="language-plaintext highlighter-rouge">node</code> from the options</p> <p><img src="https://i.imgur.com/cSC9N19.png" alt="Untitled"/></p> <p>And now, it will create a TSConfig in your root directory.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"dom"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w"> </span><span class="s2">"esnext.asynciterable"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"removeComments"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictNullChecks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictFunctionTypes"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitThis"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedLocals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedParameters"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitReturns"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noFallthroughCasesInSwitch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"node_modules"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./src/**/*.ts"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now, let‚Äôs create a simple TypeScript file.</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hellooooo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> <p>We cannot run this file directly using Node, so we need to compile this into JavaScript. To do this, let‚Äôs create a <code class="language-plaintext highlighter-rouge">watch</code> script in our <code class="language-plaintext highlighter-rouge">package.json</code> to watch our TypeScript files for changes and compile them to JavaScript in the <code class="language-plaintext highlighter-rouge">dist/</code> directory.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now if we run <code class="language-plaintext highlighter-rouge">npm watch</code> in our terminal, it will create a <code class="language-plaintext highlighter-rouge">dist</code> folder with our compiled JavaScript code. We‚Äôll create a <code class="language-plaintext highlighter-rouge">dev</code> command to run this compiled code with the following script:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/index.js"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>By the way, make sure you install <code class="language-plaintext highlighter-rouge">nodemon</code> either globally or in this project for this command to work.</p> <p>Now to run this code you will run both <code class="language-plaintext highlighter-rouge">yarn watch</code> and <code class="language-plaintext highlighter-rouge">yarn dev</code> together, to compile our TypeScript and run the compiled code automatically.</p> <p>Alright, now our TypeScript project is ready to go! üî•üî•</p> <h1 id="setting-up-typeorm">Setting up TypeORM</h1> <p><a href="https://typeorm.io">TypeORM</a> is an amazing ORM, which we can use to interact with various databases. It also has really good TypeScript support and the way we define database entities in TypeORM will be very useful when we setup TypeGraphQL later in this post.</p> <p>In this tutorial, I will be using PostgreSQL as my database and really you can follow along with any relational database which you have set up.</p> <p>Let‚Äôs install TypeORM and the native Postgres driver for Node:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add typeorm pg
</code></pre></div></div> <p>Now we can replace the code in <code class="language-plaintext highlighter-rouge">src/index.ts</code> to this:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pass</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>This basically just specifies all the options for your database connection. We are using a <code class="language-plaintext highlighter-rouge">main</code> function because top-level awaits are not a thing unless you‚Äôre using ES7 or something like that.</p> <h1 id="creating-our-entity">Creating our <code class="language-plaintext highlighter-rouge">Entity</code></h1> <p>First things first, I think some people don‚Äôt exactly know what an Entity is, so I‚Äôll just explain that part a bit now.</p> <p>As you should already know, SQL databases (like Postgres, MySQL etc.) are made up of <strong>Tables</strong> and <strong>Columns.</strong> Like an Excel spreadsheet. Each table will contain fields related to it. For example:</p> <ul> <li>A table of <strong>Cars,</strong> may have columns like <strong>Manufacturer</strong>, <strong>Engine Type</strong>, <strong>Color</strong> etc.</li> </ul> <p>An <code class="language-plaintext highlighter-rouge">Entity</code> basically defines the structure of a database table and its corresponding columns. In this post, we‚Äôll perform our CRUD operations with Tasks or Todos. So lets create an entity for a <strong>Task.</strong></p> <p>First off, create a new file in the <code class="language-plaintext highlighter-rouge">src/entities</code> directory.</p> <p>To keep it simple, we‚Äôre going to have 2 columns for our <code class="language-plaintext highlighter-rouge">Task</code> table:</p> <ul> <li>The <strong>title</strong> of the task</li> <li>The <strong>description</strong> of the task</li> </ul> <p>We‚Äôll also have an <code class="language-plaintext highlighter-rouge">id</code>, a <code class="language-plaintext highlighter-rouge">created</code>, and an <code class="language-plaintext highlighter-rouge">updated</code> column.</p> <p>We won‚Äôt really use the created and updated column, but its kind of a best practice üòâ</p> <p><code class="language-plaintext highlighter-rouge">src/entities/Task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">BaseEntity</span><span class="p">,</span>
  <span class="nx">Column</span><span class="p">,</span>
  <span class="nx">CreateDateColumn</span><span class="p">,</span>
  <span class="nx">Entity</span><span class="p">,</span>
  <span class="nx">PrimaryGeneratedColumn</span><span class="p">,</span>
  <span class="nx">UpdateDateColumn</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Entity</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Task</span> <span class="kd">extends</span> <span class="nx">BaseEntity</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">PrimaryGeneratedColumn</span><span class="p">()</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">CreateDateColumn</span><span class="p">()</span>
  <span class="nx">created</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">UpdateDateColumn</span><span class="p">()</span>
  <span class="nx">updated</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Woah, woah, what is that?!</p> <p>This my friend, is the ‚ú®¬†magic of decorators ‚ú®</p> <p>This code is extremely clean and self-documenting:</p> <ul> <li>We are creating a class called <code class="language-plaintext highlighter-rouge">Task</code> with the <code class="language-plaintext highlighter-rouge">Entity</code> decorating specifying that this class is an Entity.</li> <li>We are extending this class from <code class="language-plaintext highlighter-rouge">BaseEntity</code> so that some useful methods like <code class="language-plaintext highlighter-rouge">create</code>, <code class="language-plaintext highlighter-rouge">delete</code> etc. will be exposed to us with this class. You‚Äôll see what I mean later on.</li> <li>Then we‚Äôre creating a primary column, for our ID. This is ID field is an integer and its automatically generated by TypeORM!</li> <li>Next is the created and updated column and this too is automatically generated by TypeORM.</li> <li>The <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">description</code> is a normal column, containing the title and the description of our task.</li> </ul> <p>And don‚Äôt forget to add the <code class="language-plaintext highlighter-rouge">Task</code> entity to your <code class="language-plaintext highlighter-rouge">entities</code> array in your TypeORM config:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Phew! Finally, let‚Äôs get started with the GraphQL part!</p> <h1 id="setting-up-express-with-apollo-server">Setting up Express with Apollo Server</h1> <p>We‚Äôll be using Express as our server and we‚Äôll tell Express to use Apollo Server as middleware.</p> <p>But, what <strong>is</strong> Apollo Server??</p> <p>To understand what Apollo Server does, you‚Äôll need to know how GraphQL works at its core. Basically, in an API there will be a REST endpoint for the GraphQL stuff (kinda ironic but yeah) from where you can run Queries and Mutations from your Resolvers.</p> <p>What Apollo Server does, is just create an endpoint for your GraphQL to be served with some extra dev tools, like GraphQL Playground which helps you test your GraphQL queries in a cool environment.</p> <p>So let‚Äôs start!</p> <p>We‚Äôll install these libraries:</p> <ul> <li><code class="language-plaintext highlighter-rouge">express</code></li> <li><code class="language-plaintext highlighter-rouge">apollo-server-express</code>: Express middleware for Apollo Server</li> <li><code class="language-plaintext highlighter-rouge">graphql</code>: The JavaScript implementation of GraphQL</li> <li><code class="language-plaintext highlighter-rouge">type-graphql</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add express apollo-server-express graphql type-graphql 
</code></pre></div></div> <p>Let‚Äôs also install the type definitions for express:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/express
</code></pre></div></div> <p>Cool!</p> <p>Let‚Äôs now create our Express app:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Let‚Äôs also create a test route to see that everything‚Äôs working properly:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p><strong>Note:</strong> I am using an <code class="language-plaintext highlighter-rouge">_</code> in front of <code class="language-plaintext highlighter-rouge">req</code> because I won‚Äôt be using that variable and if you don‚Äôt use a variable you can prefix it with an underscore.</p> <p>Now let‚Äôs open up our browser and go to <code class="language-plaintext highlighter-rouge">[localhost:8000/](http://localhost:8000/)</code> and you should see something like this:</p> <p><img src="https://i.imgur.com/pKpSU2B.png" alt="Untitled"/></p> <p>To add Apollo Server as a middleware for Express, we can add the following code:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Now you‚Äôll get TypeScript yelling at you because the <code class="language-plaintext highlighter-rouge">resolvers</code> array is empty but bear with me for a sec.</p> <p>Here what we‚Äôre basically doing is, creating an instance of <code class="language-plaintext highlighter-rouge">ApolloServer</code> and passing our GraphQL schema as the <code class="language-plaintext highlighter-rouge">buildSchema</code> function from <code class="language-plaintext highlighter-rouge">type-graphql</code>.</p> <p>So what TypeGraphQL does is it converts our GraphQL resolvers (TypeScript classes) which are present in the <code class="language-plaintext highlighter-rouge">resolvers</code> arrays into SDL or GraphQL Schema Definition Language, and passes this SDL as our final GraphQL schema to Apollo Server.</p> <p>Lets also quickly create a simple GraphQL Resolver:</p> <p>For those of you who don‚Äôt know what a Resolver is:</p> <blockquote> <p>Resolver is¬†<strong>a collection of functions that generate response for a GraphQL query</strong>. In simple terms, a resolver acts as a GraphQL query handler.</p> <p>~ tutorialspoint.com</p> </blockquote> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">()</span>
  <span class="nx">hello</span><span class="p">():</span> <span class="kr">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>That‚Äôs all there is to it!</p> <p>Of course, now we should add this resolver in our <code class="language-plaintext highlighter-rouge">resolvers</code> array:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TaskResolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./resolvers/task</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[</span><span class="nx">TaskResolver</span><span class="p">],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Cool! Now let‚Äôs look at our output in the terminal aaaandd‚Ä¶</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">UnmetGraphQLPeerDependencyError</span><span class="p">:</span> <span class="nx">Looks</span> <span class="nx">like</span> <span class="nx">you</span> <span class="nx">use</span> <span class="nx">an</span> <span class="nx">incorrect</span> <span class="nx">version</span> <span class="k">of</span> <span class="nx">the</span> <span class="dl">'</span><span class="s1">graphql</span><span class="dl">'</span> <span class="kr">package</span><span class="p">:</span> <span class="dl">"</span><span class="s2">16.2.0</span><span class="dl">"</span><span class="p">.</span> <span class="nx">Please</span> <span class="nx">ensure</span> <span class="nx">that</span> <span class="nx">you</span> <span class="nx">have</span> <span class="nx">installed</span> <span class="nx">a</span> <span class="nx">version</span> <span class="nx">that</span> <span class="nx">meets</span> <span class="nx">TypeGraphQL</span><span class="dl">'</span><span class="s1">s requirement: "^15.3.0".
    at Object.ensureInstalledCorrectGraphQLPackage (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/utils/graphql-version.js:20:15)
    at Function.checkForErrors (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:47:27)
    at Function.generateFromMetadataSync (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:26:14)
    at Function.generateFromMetadata (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/schema/schema-generator.js:16:29)
    at buildSchema (/Users/dhruvasrinivas/Documents/graphql-crud/node_modules/type-graphql/dist/utils/buildSchema.js:10:61)
    at main (/Users/dhruvasrinivas/Documents/graphql-crud/dist/index.js:23:54)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
</span></code></pre></div></div> <p>UH OH! We have an error! But it‚Äôs pretty obvious what we have to do to fix it. We just have to use the specified version of the graphql package in our <code class="language-plaintext highlighter-rouge">package.json</code></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"graphql-crud"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc -w"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/index.js"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/node"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^17.0.10"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"apollo-server-express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.6.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"graphql"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^15.3.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"pg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.7.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type-graphql"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.1.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typeorm"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^0.2.41"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"typescript"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.5.5"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@types/express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.17.13"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now let‚Äôs reinstall all of our dependencies:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn
</code></pre></div></div> <p>Now if we run our code, we shouldn‚Äôt get any errors!</p> <p>Apollo Server serves our GraphQL at the <code class="language-plaintext highlighter-rouge">/graphql</code> endpoint.</p> <p>So let‚Äôs open it up in our browser.</p> <p><img src="https://i.imgur.com/uYKIjOp.png" alt="apollo propaganda page"/></p> <p>And oof we‚Äôre greeted by Apollo Server‚Äôs propaganda page üíÄ</p> <p>Fun fact: This is actually a new Apollo Server update, earlier it used to directly open up GraphQL Playground, an interactive environment to test our GraphQL queries.</p> <p>No worries though, we can spin up GraphQL playground using this Apollo Server Plugin:</p> <p><code class="language-plaintext highlighter-rouge">src/index.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Connection</span><span class="p">,</span> <span class="nx">createConnection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">buildSchema</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./entities/Task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">TaskResolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./resolvers/task</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ApolloServerPluginLandingPageGraphQLPlayground</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">apollo-server-core</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">conn</span><span class="p">:</span> <span class="nx">Connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createConnection</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the DB of your choice</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">graphql-crud</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with the name of your DB</span>
    <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's username</span>
    <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">postgres</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// replace with your database user's password</span>
    <span class="na">logging</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this shows the SQL that's being run</span>
    <span class="na">synchronize</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// this automatically runs all the database migrations, so you don't have to :)</span>
    <span class="na">entities</span><span class="p">:</span> <span class="p">[</span><span class="nx">Task</span><span class="p">],</span> <span class="c1">// we'll add our database entities here later.</span>
  <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
    <span class="na">schema</span><span class="p">:</span> <span class="k">await</span> <span class="nx">buildSchema</span><span class="p">({</span>
      <span class="na">resolvers</span><span class="p">:</span> <span class="p">[</span><span class="nx">TaskResolver</span><span class="p">],</span>
      <span class="na">validate</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">}),</span>
    <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">ApolloServerPluginLandingPageGraphQLPlayground</span><span class="p">()],</span>
  <span class="p">});</span>

  <span class="k">await</span> <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
  <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

  <span class="nx">apolloServer</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span> <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">you have not screwed up!</span><span class="dl">"</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server started on port </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
<span class="p">};</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div> <p>Now, if you refresh you can find something like this:</p> <p><img src="https://i.imgur.com/eKHWisM.png" alt="Untitled"/></p> <p>Now let‚Äôs run our <code class="language-plaintext highlighter-rouge">hello</code> query:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">hello</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And you‚Äôll see our output:</p> <p><img src="https://i.imgur.com/fRSycbD.png" alt="Untitled"/></p> <p>Awesome!!</p> <h1 id="building-crud-functionality">Building CRUD functionality</h1> <p>Now, let‚Äôs get to the main part, which is building out our CRUD functionality. Let‚Äôs start with the easiest, which is to fetch all the posts:</p> <p>BUT WAIT A MINUTE! Remember that <code class="language-plaintext highlighter-rouge">Task</code> entity we made? Like a hundred years back? Yep, that one.</p> <p>That is a database <strong>Entity</strong>, but when we get all tasks we have to return a <code class="language-plaintext highlighter-rouge">Task</code> and we can‚Äôt return an <strong>Entity</strong> cause that‚Äôs dumb. So what we‚Äôre gonna have to do is, to make <code class="language-plaintext highlighter-rouge">Task</code> a GraphQL type.</p> <p>Before you start complaining, remember that I told you that TypeGraphQL can integrate with TypeORM well? Let‚Äôs see that in action!</p> <p><code class="language-plaintext highlighter-rouge">src/entities/Task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Field</span><span class="p">,</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">ObjectType</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">BaseEntity</span><span class="p">,</span>
  <span class="nx">Column</span><span class="p">,</span>
  <span class="nx">CreateDateColumn</span><span class="p">,</span>
  <span class="nx">Entity</span><span class="p">,</span>
  <span class="nx">PrimaryGeneratedColumn</span><span class="p">,</span>
  <span class="nx">UpdateDateColumn</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">typeorm</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Entity</span><span class="p">()</span>
<span class="p">@</span><span class="nd">ObjectType</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Task</span> <span class="kd">extends</span> <span class="nx">BaseEntity</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">PrimaryGeneratedColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span>
  <span class="nx">id</span><span class="o">!</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">CreateDateColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span>
  <span class="nx">created</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">UpdateDateColumn</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span>
  <span class="nx">updated</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Column</span><span class="p">()</span>
  <span class="p">@</span><span class="nd">Field</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Get a load of that ‚ú®¬†decorator magic ‚ú®</p> <p>What we‚Äôre essentially doing here is:</p> <ul> <li>Specifying that this <code class="language-plaintext highlighter-rouge">Task</code> class is <strong>also a GraphQL type!</strong></li> <li>We are then decorating each column with the <code class="language-plaintext highlighter-rouge">Field</code> decorator, saying that each of these columns are also Fields of the <code class="language-plaintext highlighter-rouge">Task</code> type.</li> <li>We are also explicitly stating the GraphQL type of each <code class="language-plaintext highlighter-rouge">Field</code> , which are all coming from <code class="language-plaintext highlighter-rouge">type-graphql</code></li> <li>We are also specifying that the title and description field <strong>has to have a value and can never be declared as null.</strong></li> </ul> <p>The cool thing about defining your entity and GraphQL type like this is that you may have a column in your database like a password which <strong>you don‚Äôt want to expose</strong> in a response and you can just not decorate it with a <code class="language-plaintext highlighter-rouge">Field</code> to do this!</p> <h2 id="getting-all-tasks">Getting all tasks</h2> <p>Now, let‚Äôs fetch all of our Tasks:</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">Task</span><span class="p">])</span>
  <span class="k">async</span> <span class="nx">tasks</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here you can see that we‚Äôre specifying the GraphQL return type as an array of <code class="language-plaintext highlighter-rouge">Task</code>s since we also made it a GraphQL type.</p> <p>One fault you may find with this approach is that we‚Äôre defining the return types <strong>twice:</strong> once for the GraphQL return type, and once for the function‚Äôs return type. But that‚Äôs just how we do things in the TypeGraphQL world üòÖ</p> <p>Ok cool, let‚Äôs now run our query:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">tasks</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">created</span><span class="w">
    </span><span class="n">updated</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And we will get a response like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>The array is empty because we haven‚Äôt created any tasks yet.</p> <h2 id="creating-a-task">Creating a task</h2> <p>Now I‚Äôd like to ask you a question, if we use a <code class="language-plaintext highlighter-rouge">Query</code> to fetch data, will we be able to use the same <code class="language-plaintext highlighter-rouge">Query</code> to change (create, update, delete) data? No, we can‚Äôt. We will use something called a <strong><code class="language-plaintext highlighter-rouge">Mutation</code></strong> to achieve our task.</p> <p>One more thing you might be thinking is how exactly do we take inputs because when we create a task, we‚Äôll need to provide the title and description of the task, right? Guess what, TypeGraphQL has a decorator for it!</p> <p>Let‚Äôs see all of this in action. We‚Äôll define a new function in our task resolver.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Arg</span><span class="p">,</span> <span class="nx">Mutation</span><span class="p">,</span> <span class="nx">Query</span><span class="p">,</span> <span class="nx">Resolver</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">type-graphql</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Task</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../entities/Task</span><span class="dl">"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Resolver</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskResolver</span> <span class="p">{</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">Task</span><span class="p">])</span>
  <span class="k">async</span> <span class="nx">tasks</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">)</span>
  <span class="nx">createTask</span><span class="p">(</span>
    <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span>
  <span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">description</span> <span class="p">}).</span><span class="nx">save</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>I‚Äôll walk you through this new function line by line since it‚Äôs a bit confusing at first.</p> <ul> <li>We are first declaring this <code class="language-plaintext highlighter-rouge">createTask</code> as a GraphQL mutation, which returns the GraphQL <code class="language-plaintext highlighter-rouge">Task</code> type which we created. We are returning a <code class="language-plaintext highlighter-rouge">Task</code> because after the task is saved to the database we want to show that it has successfully added it.</li> <li>Then we have 2 variables, <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">string</code> decorated with <code class="language-plaintext highlighter-rouge">Arg</code>. This <code class="language-plaintext highlighter-rouge">Arg</code> specifies that these two variables will be passed as arguments when we are running this mutation (which we will do in a sec). The GraphQL type is given as <code class="language-plaintext highlighter-rouge">String</code> but this is optional because in most cases TypeGraphQL can <strong>infer</strong> the GraphQL type after looking at the variable‚Äôs TypeScript type.</li> <li>Then we‚Äôre creating a Task using <code class="language-plaintext highlighter-rouge">Task.create</code> and passing the title and description variables to it and then we‚Äôre calling <code class="language-plaintext highlighter-rouge">.save</code>.</li> </ul> <p>But why are we doing both <code class="language-plaintext highlighter-rouge">.create</code> and <code class="language-plaintext highlighter-rouge">.save</code>?</p> <p>What <code class="language-plaintext highlighter-rouge">.create</code> essentially does is, that it <strong>creates an instance of the <code class="language-plaintext highlighter-rouge">Task</code> class!</strong></p> <p>Something like this:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">(....)</span> 
</code></pre></div></div> <p>And <code class="language-plaintext highlighter-rouge">.save</code> actually saves this new instance to our Postgres database.</p> <p>You might also be wondering why we‚Äôre specifying the name of the variable both as an argument for <code class="language-plaintext highlighter-rouge">@Arg</code> and for the TypeScript variable. What we‚Äôre specifying as the string is actually the name we‚Äôre going to use to provide GraphQL with the argument. For example:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">myrandomarg</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">)</span> <span class="nx">arg</span><span class="p">:</span> <span class="kr">string</span>
</code></pre></div></div> <p>To run this mutation we would do it like this:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="n">myQuery</span><span class="p">(</span><span class="n">myrandomarg</span><span class="p">:</span><span class="w"> </span><span class="s2">"val"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="p">...</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Since we got all of that cleared, let‚Äôs run our mutation!</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">createTask</span><span class="p">(</span><span class="w">
    </span><span class="n">title</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
    </span><span class="n">description</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
  </span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">created</span><span class="w">
    </span><span class="n">updated</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"> 
</span></code></pre></div></div> <p>And we get our response back!</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"createTask"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"updated"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Awesome!</p> <p>Another thing we can do now is since we have created a post, we can try fetching all of our posts again.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="nl">"created"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"updated"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1643090973749"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And it‚Äôs all working yay üéâ</p> <h2 id="getting-a-single-post-by-id">Getting a single post by ID</h2> <p>This should be pretty straight-forward since we already know how to include an argument.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Query</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
<span class="k">async</span> <span class="nx">task</span><span class="p">(@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">id</span> <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here we‚Äôre saying that this <code class="language-plaintext highlighter-rouge">Query</code> returns a single <code class="language-plaintext highlighter-rouge">Task</code> and it can return a <code class="language-plaintext highlighter-rouge">null</code> if a post with this ID is not found.</p> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">Int</code> comes from <code class="language-plaintext highlighter-rouge">type-graphql</code></p> <p>Also the TypeScript return type is:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span>
</code></pre></div></div> <p>This basically says that this function can either return a Promise of a Task if a post with such and such ID is found, but otherwise it will return an <code class="language-plaintext highlighter-rouge">undefined</code>.</p> <p>And we‚Äôre using <code class="language-plaintext highlighter-rouge">Task.findOne()</code> to get a single task and providing the ID as the search query.</p> <p>So, if we run this query using:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>We‚Äôll get this response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And if we provide an ID that doesn‚Äôt exist, we‚Äôll get a null as the response:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1717</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="deleting-a-post">Deleting a post</h2> <p>Deleting a post is quite similar to the function we created for getting a single post.</p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">Boolean</span><span class="p">)</span>
<span class="k">async</span> <span class="nx">deleteTask</span><span class="p">(@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">id</span> <span class="p">}))</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here we are returning the <code class="language-plaintext highlighter-rouge">Boolean</code> GraphQL type. We first check if a post with the ID provided exists, then we delete it and return <code class="language-plaintext highlighter-rouge">true</code>, but if it doesn‚Äôt, we return <code class="language-plaintext highlighter-rouge">false</code>.</p> <p>Let‚Äôs run this mutation:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">deleteTask</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> 
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Note:</strong> First, create another Task and then run this mutation.</p> <p>And you will get this response!</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"deleteTask"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now, finally we‚Äôre gonna create one final function to update our Task.</p> <h2 id="updating-a-task">Updating a Task</h2> <p>To update a task, we‚Äôll need to get:</p> <ul> <li>the ID of the task</li> <li>the new title</li> <li>the new description</li> </ul> <p>And then we‚Äôll need to check if a post with the mentioned ID exists, if it doesn‚Äôt we will return <code class="language-plaintext highlighter-rouge">null</code></p> <p>Then we will check if a title or a description if provided and if it is, we will update the Task using <code class="language-plaintext highlighter-rouge">Task.update</code></p> <p><code class="language-plaintext highlighter-rouge">src/resolvers/task.ts</code></p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Mutation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
<span class="k">async</span> <span class="nx">updateTask</span><span class="p">(</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="nx">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="p">{</span> <span class="na">nullable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="nx">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="p">@</span><span class="nd">Arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Int</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Task</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">task</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">title</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">title</span> <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">description</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Task</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">description</span> <span class="p">});</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">task</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>All this is familiar code, it‚Äôs just that the complexity of our operation is a bit higher. Let‚Äôs now test this mutation:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">updateTask</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="p">:</span><span class="w"> </span><span class="s2">"first post by me!"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And we‚Äôll get our response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"updateTask"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my first post!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>If we run the get task by ID query we can see our updated Task:</p> <div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="n">task</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="w">
    </span><span class="n">title</span><span class="w">
    </span><span class="n">description</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Response:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"task"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"first post by me!"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"this is my first post"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>And that‚Äôs it!! We‚Äôre done with our CRUD!! üöÄüöÄ</p> <h1 id="challenge">Challenge</h1> <p>As promised, you can try implementing the features listed below to improve your understanding of the concept üí™</p> <ul> <li>Make an <code class="language-plaintext highlighter-rouge">isComplete</code> boolean field in the <code class="language-plaintext highlighter-rouge">Task</code> entity</li> <li>Make a <code class="language-plaintext highlighter-rouge">markComplete</code> mutation to change the value of <code class="language-plaintext highlighter-rouge">isComplete</code> of a Task</li> <li>You can also make a simple <code class="language-plaintext highlighter-rouge">filter</code> query to search for tasks based on the <code class="language-plaintext highlighter-rouge">title</code> arg given by the user.</li> </ul> <p>If you need help implementing any of these, leave a comment and I‚Äôll answer your query!</p> <p>You can find the source code <a href="https://github.com/carrotfarmer/graphql-crud">here</a>.</p> <p>And that‚Äôs it for this post, see ya in the next one!</p>]]></content><author><name>dhruva</name></author><category term="backend"/><category term="api"/><category term="node-js"/><category term="web-development"/><summary type="html"><![CDATA[The complete guide to working with GraphQL using TypeGraphQL and building a basic CRUD functionality with TypeORM and Postgres.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/151178959-781d2ea4-a4dc-4f89-90d9-b98d62821944.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/151178959-781d2ea4-a4dc-4f89-90d9-b98d62821944.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>